schema {
  query: RootQueryType
}

type breadcrumb {
  title: String
  path: String
}

type config_2 {
  version: String
}

type context {
  breadcrumb: [breadcrumb]
}

"""
A date string, such as 2007-12-03, compliant with the ISO 8601 standard  for
representation of dates and times using the Gregorian calendar.
"""
scalar Date

type dependencies_2 {
  name: String
  version: String
}

type devDependencies_2 {
  name: String
  version: String
}

"""Node of type Directory"""
type Directory implements Node {
  """The id of this node."""
  id: ID!

  """The parent of this node."""
  parent: Node

  """The children of this node."""
  children: [Node]
  internal: internal_11
  sourceInstanceName: String
  absolutePath: String
  relativePath: String
  extension: String
  size: Int
  prettySize: String
  modifiedTime(
    """
    Format the date using Moment.js' date tokens e.g. "date(formatString: "YYYY
    MMMM DD)" See https://momentjs.com/docs/#/displaying/format/ for
    documentation for different tokens
    """
    formatString: String

    """Returns a string generated with Moment.js' fromNow function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to
    miliseconds but you can also pass in as the measurement years, months,
    weeks, days, hours, minutes, and seconds.
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date
  accessTime(
    """
    Format the date using Moment.js' date tokens e.g. "date(formatString: "YYYY
    MMMM DD)" See https://momentjs.com/docs/#/displaying/format/ for
    documentation for different tokens
    """
    formatString: String

    """Returns a string generated with Moment.js' fromNow function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to
    miliseconds but you can also pass in as the measurement years, months,
    weeks, days, hours, minutes, and seconds.
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date
  changeTime(
    """
    Format the date using Moment.js' date tokens e.g. "date(formatString: "YYYY
    MMMM DD)" See https://momentjs.com/docs/#/displaying/format/ for
    documentation for different tokens
    """
    formatString: String

    """Returns a string generated with Moment.js' fromNow function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to
    miliseconds but you can also pass in as the measurement years, months,
    weeks, days, hours, minutes, and seconds.
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date
  birthTime(
    """
    Format the date using Moment.js' date tokens e.g. "date(formatString: "YYYY
    MMMM DD)" See https://momentjs.com/docs/#/displaying/format/ for
    documentation for different tokens
    """
    formatString: String

    """Returns a string generated with Moment.js' fromNow function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to
    miliseconds but you can also pass in as the measurement years, months,
    weeks, days, hours, minutes, and seconds.
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date
  root: String
  dir: String
  base: String
  ext: String
  name: String
  relativeDirectory: String
  dev: Int
  mode: Int
  nlink: Int
  uid: Int
  gid: Int
  rdev: Int
  blksize: Int
  ino: Int
  blocks: Int
  atimeMs: Float
  mtimeMs: Float
  ctimeMs: Float
  birthtimeMs: Float
  atime(
    """
    Format the date using Moment.js' date tokens e.g. "date(formatString: "YYYY
    MMMM DD)" See https://momentjs.com/docs/#/displaying/format/ for
    documentation for different tokens
    """
    formatString: String

    """Returns a string generated with Moment.js' fromNow function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to
    miliseconds but you can also pass in as the measurement years, months,
    weeks, days, hours, minutes, and seconds.
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date
  mtime(
    """
    Format the date using Moment.js' date tokens e.g. "date(formatString: "YYYY
    MMMM DD)" See https://momentjs.com/docs/#/displaying/format/ for
    documentation for different tokens
    """
    formatString: String

    """Returns a string generated with Moment.js' fromNow function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to
    miliseconds but you can also pass in as the measurement years, months,
    weeks, days, hours, minutes, and seconds.
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date
  ctime(
    """
    Format the date using Moment.js' date tokens e.g. "date(formatString: "YYYY
    MMMM DD)" See https://momentjs.com/docs/#/displaying/format/ for
    documentation for different tokens
    """
    formatString: String

    """Returns a string generated with Moment.js' fromNow function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to
    miliseconds but you can also pass in as the measurement years, months,
    weeks, days, hours, minutes, and seconds.
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date
  birthtime(
    """
    Format the date using Moment.js' date tokens e.g. "date(formatString: "YYYY
    MMMM DD)" See https://momentjs.com/docs/#/displaying/format/ for
    documentation for different tokens
    """
    formatString: String

    """Returns a string generated with Moment.js' fromNow function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to
    miliseconds but you can also pass in as the measurement years, months,
    weeks, days, hours, minutes, and seconds.
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date
}

input directoryAbsolutePathQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input directoryAccessTimeQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input directoryAtimeMsQueryFloat_2 {
  eq: Float
  ne: Float
}

input directoryAtimeQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input directoryBaseQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input directoryBirthtimeMsQueryFloat_2 {
  eq: Float
  ne: Float
}

input directoryBirthtimeQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input directoryBirthTimeQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input directoryBlksizeQueryInteger_2 {
  eq: Int
  ne: Int
}

input directoryBlocksQueryInteger_2 {
  eq: Int
  ne: Int
}

input directoryChangeTimeQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

"""A connection to a list of items."""
type DirectoryConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [DirectoryEdge]
  totalCount: Int
  distinct(field: directoryDistinctEnum): [String]
  group(skip: Int, limit: Int, field: directoryGroupEnum): [directoryGroupConnectionConnection]
}

input directoryConnectionAbsolutePathQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input directoryConnectionAccessTimeQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input directoryConnectionAtimeMsQueryFloat_2 {
  eq: Float
  ne: Float
}

input directoryConnectionAtimeQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input directoryConnectionBaseQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input directoryConnectionBirthtimeMsQueryFloat_2 {
  eq: Float
  ne: Float
}

input directoryConnectionBirthtimeQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input directoryConnectionBirthTimeQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input directoryConnectionBlksizeQueryInteger_2 {
  eq: Int
  ne: Int
}

input directoryConnectionBlocksQueryInteger_2 {
  eq: Int
  ne: Int
}

input directoryConnectionChangeTimeQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input directoryConnectionCtimeMsQueryFloat_2 {
  eq: Float
  ne: Float
}

input directoryConnectionCtimeQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input directoryConnectionDevQueryInteger_2 {
  eq: Int
  ne: Int
}

input directoryConnectionDirQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input directoryConnectionExtensionQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input directoryConnectionExtQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input directoryConnectionGidQueryInteger_2 {
  eq: Int
  ne: Int
}

input directoryConnectionIdQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input directoryConnectionInoQueryInteger_2 {
  eq: Int
  ne: Int
}

input directoryConnectionInternalContentDigestQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input directoryConnectionInternalDescriptionQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input directoryConnectionInternalInputObject_2 {
  contentDigest: directoryConnectionInternalContentDigestQueryString_2
  type: directoryConnectionInternalTypeQueryString_2
  description: directoryConnectionInternalDescriptionQueryString_2
  owner: directoryConnectionInternalOwnerQueryString_2
}

input directoryConnectionInternalOwnerQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input directoryConnectionInternalTypeQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input directoryConnectionModeQueryInteger_2 {
  eq: Int
  ne: Int
}

input directoryConnectionModifiedTimeQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input directoryConnectionMtimeMsQueryFloat_2 {
  eq: Float
  ne: Float
}

input directoryConnectionMtimeQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input directoryConnectionNameQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input directoryConnectionNlinkQueryInteger_2 {
  eq: Int
  ne: Int
}

input directoryConnectionPrettySizeQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input directoryConnectionRdevQueryInteger_2 {
  eq: Int
  ne: Int
}

input directoryConnectionRelativeDirectoryQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input directoryConnectionRelativePathQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input directoryConnectionRootQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input directoryConnectionSizeQueryInteger_2 {
  eq: Int
  ne: Int
}

input directoryConnectionSort {
  fields: [DirectoryConnectionSortByFieldsEnum]!
  order: directoryConnectionSortOrderValues = ASC
}

enum DirectoryConnectionSortByFieldsEnum {
  id
  parent
  internal___contentDigest
  internal___type
  internal___description
  internal___owner
  sourceInstanceName
  absolutePath
  relativePath
  extension
  size
  prettySize
  modifiedTime
  accessTime
  changeTime
  birthTime
  root
  dir
  base
  ext
  name
  relativeDirectory
  dev
  mode
  nlink
  uid
  gid
  rdev
  blksize
  ino
  blocks
  atimeMs
  mtimeMs
  ctimeMs
  birthtimeMs
  atime
  mtime
  ctime
  birthtime
}

enum directoryConnectionSortOrderValues {
  ASC
  DESC
}

input directoryConnectionSourceInstanceNameQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input directoryConnectionUidQueryInteger_2 {
  eq: Int
  ne: Int
}

input directoryCtimeMsQueryFloat_2 {
  eq: Float
  ne: Float
}

input directoryCtimeQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input directoryDevQueryInteger_2 {
  eq: Int
  ne: Int
}

input directoryDirQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

enum directoryDistinctEnum {
  id
  parent
  internal___contentDigest
  internal___type
  internal___description
  internal___owner
  sourceInstanceName
  absolutePath
  relativePath
  extension
  size
  prettySize
  modifiedTime
  accessTime
  changeTime
  birthTime
  root
  dir
  base
  ext
  name
  relativeDirectory
  dev
  mode
  nlink
  uid
  gid
  rdev
  blksize
  ino
  blocks
  atimeMs
  mtimeMs
  ctimeMs
  birthtimeMs
  atime
  mtime
  ctime
  birthtime
}

"""An edge in a connection."""
type DirectoryEdge {
  """The item at the end of the edge"""
  node: Directory

  """The next edge in the connection"""
  next: Directory

  """The previous edge in the connection"""
  previous: Directory
}

input directoryExtensionQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input directoryExtQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input directoryGidQueryInteger_2 {
  eq: Int
  ne: Int
}

"""A connection to a list of items."""
type directoryGroupConnectionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [directoryGroupConnectionEdge]
  field: String
  fieldValue: String
  totalCount: Int
}

"""An edge in a connection."""
type directoryGroupConnectionEdge {
  """The item at the end of the edge"""
  node: Directory

  """The next edge in the connection"""
  next: Directory

  """The previous edge in the connection"""
  previous: Directory
}

enum directoryGroupEnum {
  id
  parent
  internal___contentDigest
  internal___type
  internal___description
  internal___owner
  sourceInstanceName
  absolutePath
  relativePath
  extension
  size
  prettySize
  modifiedTime
  accessTime
  changeTime
  birthTime
  root
  dir
  base
  ext
  name
  relativeDirectory
  dev
  mode
  nlink
  uid
  gid
  rdev
  blksize
  ino
  blocks
  atimeMs
  mtimeMs
  ctimeMs
  birthtimeMs
  atime
  mtime
  ctime
  birthtime
}

input directoryIdQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input directoryInoQueryInteger_2 {
  eq: Int
  ne: Int
}

input directoryInternalContentDigestQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input directoryInternalDescriptionQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input directoryInternalInputObject_2 {
  contentDigest: directoryInternalContentDigestQueryString_2
  type: directoryInternalTypeQueryString_2
  description: directoryInternalDescriptionQueryString_2
  owner: directoryInternalOwnerQueryString_2
}

input directoryInternalOwnerQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input directoryInternalTypeQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input directoryModeQueryInteger_2 {
  eq: Int
  ne: Int
}

input directoryModifiedTimeQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input directoryMtimeMsQueryFloat_2 {
  eq: Float
  ne: Float
}

input directoryMtimeQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input directoryNameQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input directoryNlinkQueryInteger_2 {
  eq: Int
  ne: Int
}

input directoryPrettySizeQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input directoryRdevQueryInteger_2 {
  eq: Int
  ne: Int
}

input directoryRelativeDirectoryQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input directoryRelativePathQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input directoryRootQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input directorySizeQueryInteger_2 {
  eq: Int
  ne: Int
}

input directorySourceInstanceNameQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input directoryUidQueryInteger_2 {
  eq: Int
  ne: Int
}

input excerptQueryString_3 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input excerptQueryString_4 {
  eq: String
  ne: String
  regex: String
  glob: String
}

"""Node of type File"""
type File implements Node {
  """The id of this node."""
  id: ID!

  """The parent of this node."""
  parent: Node

  """The children of this node."""
  children: [Node]

  """The child of this node of type markdownRemark"""
  childMarkdownRemark: MarkdownRemark

  """The child of this node of type svgsJson"""
  childSvgsJson: SvgsJson

  """The children of this node of type integrationsJson"""
  childrenIntegrationsJson: [IntegrationsJson]
  internal: internal_12
  sourceInstanceName: String
  absolutePath: String
  relativePath: String
  extension: String
  size: Int
  prettySize: String
  modifiedTime(
    """
    Format the date using Moment.js' date tokens e.g. "date(formatString: "YYYY
    MMMM DD)" See https://momentjs.com/docs/#/displaying/format/ for
    documentation for different tokens
    """
    formatString: String

    """Returns a string generated with Moment.js' fromNow function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to
    miliseconds but you can also pass in as the measurement years, months,
    weeks, days, hours, minutes, and seconds.
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date
  accessTime(
    """
    Format the date using Moment.js' date tokens e.g. "date(formatString: "YYYY
    MMMM DD)" See https://momentjs.com/docs/#/displaying/format/ for
    documentation for different tokens
    """
    formatString: String

    """Returns a string generated with Moment.js' fromNow function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to
    miliseconds but you can also pass in as the measurement years, months,
    weeks, days, hours, minutes, and seconds.
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date
  changeTime(
    """
    Format the date using Moment.js' date tokens e.g. "date(formatString: "YYYY
    MMMM DD)" See https://momentjs.com/docs/#/displaying/format/ for
    documentation for different tokens
    """
    formatString: String

    """Returns a string generated with Moment.js' fromNow function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to
    miliseconds but you can also pass in as the measurement years, months,
    weeks, days, hours, minutes, and seconds.
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date
  birthTime(
    """
    Format the date using Moment.js' date tokens e.g. "date(formatString: "YYYY
    MMMM DD)" See https://momentjs.com/docs/#/displaying/format/ for
    documentation for different tokens
    """
    formatString: String

    """Returns a string generated with Moment.js' fromNow function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to
    miliseconds but you can also pass in as the measurement years, months,
    weeks, days, hours, minutes, and seconds.
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date
  root: String
  dir: String
  base: String
  ext: String
  name: String
  relativeDirectory: String
  dev: Int
  mode: Int
  nlink: Int
  uid: Int
  gid: Int
  rdev: Int
  blksize: Int
  ino: Int
  blocks: Int
  atimeMs: Float
  mtimeMs: Float
  ctimeMs: Float
  birthtimeMs: Float
  atime(
    """
    Format the date using Moment.js' date tokens e.g. "date(formatString: "YYYY
    MMMM DD)" See https://momentjs.com/docs/#/displaying/format/ for
    documentation for different tokens
    """
    formatString: String

    """Returns a string generated with Moment.js' fromNow function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to
    miliseconds but you can also pass in as the measurement years, months,
    weeks, days, hours, minutes, and seconds.
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date
  mtime(
    """
    Format the date using Moment.js' date tokens e.g. "date(formatString: "YYYY
    MMMM DD)" See https://momentjs.com/docs/#/displaying/format/ for
    documentation for different tokens
    """
    formatString: String

    """Returns a string generated with Moment.js' fromNow function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to
    miliseconds but you can also pass in as the measurement years, months,
    weeks, days, hours, minutes, and seconds.
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date
  ctime(
    """
    Format the date using Moment.js' date tokens e.g. "date(formatString: "YYYY
    MMMM DD)" See https://momentjs.com/docs/#/displaying/format/ for
    documentation for different tokens
    """
    formatString: String

    """Returns a string generated with Moment.js' fromNow function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to
    miliseconds but you can also pass in as the measurement years, months,
    weeks, days, hours, minutes, and seconds.
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date
  birthtime(
    """
    Format the date using Moment.js' date tokens e.g. "date(formatString: "YYYY
    MMMM DD)" See https://momentjs.com/docs/#/displaying/format/ for
    documentation for different tokens
    """
    formatString: String

    """Returns a string generated with Moment.js' fromNow function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to
    miliseconds but you can also pass in as the measurement years, months,
    weeks, days, hours, minutes, and seconds.
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date

  """Copy file to static directory and return public url to it"""
  publicURL: String
}

input fileAbsolutePathQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input fileAccessTimeQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input fileAtimeMsQueryFloat_2 {
  eq: Float
  ne: Float
}

input fileAtimeQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input fileBaseQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input fileBirthtimeMsQueryFloat_2 {
  eq: Float
  ne: Float
}

input fileBirthtimeQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input fileBirthTimeQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input fileBlksizeQueryInteger_2 {
  eq: Int
  ne: Int
}

input fileBlocksQueryInteger_2 {
  eq: Int
  ne: Int
}

input fileChangeTimeQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

"""A connection to a list of items."""
type FileConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [FileEdge]
  totalCount: Int
  distinct(field: fileDistinctEnum): [String]
  group(skip: Int, limit: Int, field: fileGroupEnum): [fileGroupConnectionConnection]
}

input fileConnectionAbsolutePathQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input fileConnectionAccessTimeQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input fileConnectionAtimeMsQueryFloat_2 {
  eq: Float
  ne: Float
}

input fileConnectionAtimeQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input fileConnectionBaseQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input fileConnectionBirthtimeMsQueryFloat_2 {
  eq: Float
  ne: Float
}

input fileConnectionBirthtimeQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input fileConnectionBirthTimeQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input fileConnectionBlksizeQueryInteger_2 {
  eq: Int
  ne: Int
}

input fileConnectionBlocksQueryInteger_2 {
  eq: Int
  ne: Int
}

input fileConnectionChangeTimeQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input fileConnectionCtimeMsQueryFloat_2 {
  eq: Float
  ne: Float
}

input fileConnectionCtimeQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input fileConnectionDevQueryInteger_2 {
  eq: Int
  ne: Int
}

input fileConnectionDirQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input fileConnectionExtensionQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input fileConnectionExtQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input fileConnectionGidQueryInteger_2 {
  eq: Int
  ne: Int
}

input fileConnectionIdQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input fileConnectionInoQueryInteger_2 {
  eq: Int
  ne: Int
}

input fileConnectionInternalContentDigestQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input fileConnectionInternalDescriptionQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input fileConnectionInternalInputObject_2 {
  contentDigest: fileConnectionInternalContentDigestQueryString_2
  mediaType: fileConnectionInternalMediaTypeQueryString_2
  type: fileConnectionInternalTypeQueryString_2
  description: fileConnectionInternalDescriptionQueryString_2
  owner: fileConnectionInternalOwnerQueryString_2
}

input fileConnectionInternalMediaTypeQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input fileConnectionInternalOwnerQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input fileConnectionInternalTypeQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input fileConnectionModeQueryInteger_2 {
  eq: Int
  ne: Int
}

input fileConnectionModifiedTimeQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input fileConnectionMtimeMsQueryFloat_2 {
  eq: Float
  ne: Float
}

input fileConnectionMtimeQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input fileConnectionNameQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input fileConnectionNlinkQueryInteger_2 {
  eq: Int
  ne: Int
}

input fileConnectionPrettySizeQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input fileConnectionRdevQueryInteger_2 {
  eq: Int
  ne: Int
}

input fileConnectionRelativeDirectoryQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input fileConnectionRelativePathQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input fileConnectionRootQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input fileConnectionSizeQueryInteger_2 {
  eq: Int
  ne: Int
}

input fileConnectionSort {
  fields: [FileConnectionSortByFieldsEnum]!
  order: fileConnectionSortOrderValues = ASC
}

enum FileConnectionSortByFieldsEnum {
  id
  children
  parent
  internal___contentDigest
  internal___mediaType
  internal___type
  internal___description
  internal___owner
  sourceInstanceName
  absolutePath
  relativePath
  extension
  size
  prettySize
  modifiedTime
  accessTime
  changeTime
  birthTime
  root
  dir
  base
  ext
  name
  relativeDirectory
  dev
  mode
  nlink
  uid
  gid
  rdev
  blksize
  ino
  blocks
  atimeMs
  mtimeMs
  ctimeMs
  birthtimeMs
  atime
  mtime
  ctime
  birthtime
  publicURL
}

enum fileConnectionSortOrderValues {
  ASC
  DESC
}

input fileConnectionSourceInstanceNameQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input fileConnectionUidQueryInteger_2 {
  eq: Int
  ne: Int
}

input fileCtimeMsQueryFloat_2 {
  eq: Float
  ne: Float
}

input fileCtimeQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input fileDevQueryInteger_2 {
  eq: Int
  ne: Int
}

input fileDirQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

enum fileDistinctEnum {
  id
  children
  parent
  internal___contentDigest
  internal___mediaType
  internal___type
  internal___description
  internal___owner
  sourceInstanceName
  absolutePath
  relativePath
  extension
  size
  prettySize
  modifiedTime
  accessTime
  changeTime
  birthTime
  root
  dir
  base
  ext
  name
  relativeDirectory
  dev
  mode
  nlink
  uid
  gid
  rdev
  blksize
  ino
  blocks
  atimeMs
  mtimeMs
  ctimeMs
  birthtimeMs
  atime
  mtime
  ctime
  birthtime
}

"""An edge in a connection."""
type FileEdge {
  """The item at the end of the edge"""
  node: File

  """The next edge in the connection"""
  next: File

  """The previous edge in the connection"""
  previous: File
}

input fileExtensionQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input fileExtQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input fileGidQueryInteger_2 {
  eq: Int
  ne: Int
}

"""A connection to a list of items."""
type fileGroupConnectionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [fileGroupConnectionEdge]
  field: String
  fieldValue: String
  totalCount: Int
}

"""An edge in a connection."""
type fileGroupConnectionEdge {
  """The item at the end of the edge"""
  node: File

  """The next edge in the connection"""
  next: File

  """The previous edge in the connection"""
  previous: File
}

enum fileGroupEnum {
  id
  children
  parent
  internal___contentDigest
  internal___mediaType
  internal___type
  internal___description
  internal___owner
  sourceInstanceName
  absolutePath
  relativePath
  extension
  size
  prettySize
  modifiedTime
  accessTime
  changeTime
  birthTime
  root
  dir
  base
  ext
  name
  relativeDirectory
  dev
  mode
  nlink
  uid
  gid
  rdev
  blksize
  ino
  blocks
  atimeMs
  mtimeMs
  ctimeMs
  birthtimeMs
  atime
  mtime
  ctime
  birthtime
}

input fileIdQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input fileInoQueryInteger_2 {
  eq: Int
  ne: Int
}

input fileInternalContentDigestQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input fileInternalDescriptionQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input fileInternalInputObject_2 {
  contentDigest: fileInternalContentDigestQueryString_2
  mediaType: fileInternalMediaTypeQueryString_2
  type: fileInternalTypeQueryString_2
  description: fileInternalDescriptionQueryString_2
  owner: fileInternalOwnerQueryString_2
}

input fileInternalMediaTypeQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input fileInternalOwnerQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input fileInternalTypeQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input fileModeQueryInteger_2 {
  eq: Int
  ne: Int
}

input fileModifiedTimeQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input fileMtimeMsQueryFloat_2 {
  eq: Float
  ne: Float
}

input fileMtimeQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input fileNameQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input fileNlinkQueryInteger_2 {
  eq: Int
  ne: Int
}

input filePrettySizeQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input fileRdevQueryInteger_2 {
  eq: Int
  ne: Int
}

input fileRelativeDirectoryQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input fileRelativePathQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input fileRootQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input fileSizeQueryInteger_2 {
  eq: Int
  ne: Int
}

input fileSourceInstanceNameQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input fileUidQueryInteger_2 {
  eq: Int
  ne: Int
}

"""Filter connection on its fields"""
input filterDirectory {
  id: directoryConnectionIdQueryString_2
  internal: directoryConnectionInternalInputObject_2
  sourceInstanceName: directoryConnectionSourceInstanceNameQueryString_2
  absolutePath: directoryConnectionAbsolutePathQueryString_2
  relativePath: directoryConnectionRelativePathQueryString_2
  extension: directoryConnectionExtensionQueryString_2
  size: directoryConnectionSizeQueryInteger_2
  prettySize: directoryConnectionPrettySizeQueryString_2
  modifiedTime: directoryConnectionModifiedTimeQueryString_2
  accessTime: directoryConnectionAccessTimeQueryString_2
  changeTime: directoryConnectionChangeTimeQueryString_2
  birthTime: directoryConnectionBirthTimeQueryString_2
  root: directoryConnectionRootQueryString_2
  dir: directoryConnectionDirQueryString_2
  base: directoryConnectionBaseQueryString_2
  ext: directoryConnectionExtQueryString_2
  name: directoryConnectionNameQueryString_2
  relativeDirectory: directoryConnectionRelativeDirectoryQueryString_2
  dev: directoryConnectionDevQueryInteger_2
  mode: directoryConnectionModeQueryInteger_2
  nlink: directoryConnectionNlinkQueryInteger_2
  uid: directoryConnectionUidQueryInteger_2
  gid: directoryConnectionGidQueryInteger_2
  rdev: directoryConnectionRdevQueryInteger_2
  blksize: directoryConnectionBlksizeQueryInteger_2
  ino: directoryConnectionInoQueryInteger_2
  blocks: directoryConnectionBlocksQueryInteger_2
  atimeMs: directoryConnectionAtimeMsQueryFloat_2
  mtimeMs: directoryConnectionMtimeMsQueryFloat_2
  ctimeMs: directoryConnectionCtimeMsQueryFloat_2
  birthtimeMs: directoryConnectionBirthtimeMsQueryFloat_2
  atime: directoryConnectionAtimeQueryString_2
  mtime: directoryConnectionMtimeQueryString_2
  ctime: directoryConnectionCtimeQueryString_2
  birthtime: directoryConnectionBirthtimeQueryString_2
}

"""Filter connection on its fields"""
input filterFile {
  id: fileConnectionIdQueryString_2
  internal: fileConnectionInternalInputObject_2
  sourceInstanceName: fileConnectionSourceInstanceNameQueryString_2
  absolutePath: fileConnectionAbsolutePathQueryString_2
  relativePath: fileConnectionRelativePathQueryString_2
  extension: fileConnectionExtensionQueryString_2
  size: fileConnectionSizeQueryInteger_2
  prettySize: fileConnectionPrettySizeQueryString_2
  modifiedTime: fileConnectionModifiedTimeQueryString_2
  accessTime: fileConnectionAccessTimeQueryString_2
  changeTime: fileConnectionChangeTimeQueryString_2
  birthTime: fileConnectionBirthTimeQueryString_2
  root: fileConnectionRootQueryString_2
  dir: fileConnectionDirQueryString_2
  base: fileConnectionBaseQueryString_2
  ext: fileConnectionExtQueryString_2
  name: fileConnectionNameQueryString_2
  relativeDirectory: fileConnectionRelativeDirectoryQueryString_2
  dev: fileConnectionDevQueryInteger_2
  mode: fileConnectionModeQueryInteger_2
  nlink: fileConnectionNlinkQueryInteger_2
  uid: fileConnectionUidQueryInteger_2
  gid: fileConnectionGidQueryInteger_2
  rdev: fileConnectionRdevQueryInteger_2
  blksize: fileConnectionBlksizeQueryInteger_2
  ino: fileConnectionInoQueryInteger_2
  blocks: fileConnectionBlocksQueryInteger_2
  atimeMs: fileConnectionAtimeMsQueryFloat_2
  mtimeMs: fileConnectionMtimeMsQueryFloat_2
  ctimeMs: fileConnectionCtimeMsQueryFloat_2
  birthtimeMs: fileConnectionBirthtimeMsQueryFloat_2
  atime: fileConnectionAtimeQueryString_2
  mtime: fileConnectionMtimeQueryString_2
  ctime: fileConnectionCtimeQueryString_2
  birthtime: fileConnectionBirthtimeQueryString_2
  publicURL: publicUrlQueryString_4
}

"""Filter connection on its fields"""
input filterIntegrationsJson {
  createUrl: integrationsJsonConnectionCreateUrlQueryString_2
  descriptionHtml: integrationsJsonConnectionDescriptionHtmlQueryString_2
  descriptionPlain: integrationsJsonConnectionDescriptionPlainQueryString_2
  id: integrationsJsonConnectionIdQueryString_2
  path: integrationsJsonConnectionPathQueryString_2
  status: integrationsJsonConnectionStatusQueryString_2
  steps: integrationsJsonConnectionStepsQueryList_2
  title: integrationsJsonConnectionTitleQueryString_2
  internal: integrationsJsonConnectionInternalInputObject_2
}

"""Filter connection on its fields"""
input filterMarkdownRemark {
  id: markdownRemarkConnectionIdQueryString_2
  internal: markdownRemarkConnectionInternalInputObject_2
  frontmatter: markdownRemarkConnectionFrontmatterInputObject_2
  excerpt: excerptQueryString_4
  fileAbsolutePath: markdownRemarkConnectionFileAbsolutePathQueryString_2
  html: htmlQueryString_4
  headings: headingsQueryList_4
  timeToRead: timeToReadQueryInt_4
  tableOfContents: tableOfContentsQueryString_4
  wordCount: wordCountTypeName_4
}

"""Filter connection on its fields"""
input filterSitePage {
  layout: sitePageConnectionLayoutQueryString
  jsonName: sitePageConnectionJsonNameQueryString
  internalComponentName: sitePageConnectionInternalComponentNameQueryString
  path: sitePageConnectionPathQueryString_2
  component: sitePageConnectionComponentQueryString
  componentChunkName: sitePageConnectionComponentChunkNameQueryString
  context: sitePageConnectionContextInputObject
  pluginCreator: sitePageConnectionPluginCreatorInputObject
  pluginCreatorId: sitePageConnectionPluginCreatorIdQueryString_2
  componentPath: sitePageConnectionComponentPathQueryString
  id: sitePageConnectionIdQueryString_2
  internal: sitePageConnectionInternalInputObject_2
}

"""Filter connection on its fields"""
input filterSitePlugin {
  resolve: sitePluginConnectionResolveQueryString_2
  id: sitePluginConnectionIdQueryString_2
  name: sitePluginConnectionNameQueryString_2
  version: sitePluginConnectionVersionQueryString_2
  pluginOptions: sitePluginConnectionPluginOptionsInputObject_2
  nodeAPIs: sitePluginConnectionNodeApIsQueryList_2
  browserAPIs: sitePluginConnectionBrowserApIsQueryList_2
  ssrAPIs: sitePluginConnectionSsrApIsQueryList_2
  pluginFilepath: sitePluginConnectionPluginFilepathQueryString_2
  packageJson: sitePluginConnectionPackageJsonInputObject_2
  internal: sitePluginConnectionInternalInputObject_2
}

"""Filter connection on its fields"""
input filterSvgsJson {
  moduleNameTemplate: svgsJsonConnectionModuleNameTemplateQueryString_2
  id: svgsJsonConnectionIdQueryString_2
  internal: svgsJsonConnectionInternalInputObject_2
}

type frontmatter_2 {
  title: String
  breadcrumbOnly: Boolean
  path: String
  _PARENT: String
  parent: String
  weight: Int
  date(
    """
    Format the date using Moment.js' date tokens e.g. "date(formatString: "YYYY
    MMMM DD)" See https://momentjs.com/docs/#/displaying/format/ for
    documentation for different tokens
    """
    formatString: String

    """Returns a string generated with Moment.js' fromNow function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to
    miliseconds but you can also pass in as the measurement years, months,
    weeks, days, hours, minutes, and seconds.
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date
}

enum HeadingLevels {
  h1
  h2
  h3
  h4
  h5
  h6
}

input headingsListElemDepthQueryInt_3 {
  eq: Int
  ne: Int
}

input headingsListElemDepthQueryInt_4 {
  eq: Int
  ne: Int
}

input headingsListElemValueQueryString_3 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input headingsListElemValueQueryString_4 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input headingsQueryList_3 {
  value: headingsListElemValueQueryString_3
  depth: headingsListElemDepthQueryInt_3
  in: [markdownHeadingInputObject_3]
}

input headingsQueryList_4 {
  value: headingsListElemValueQueryString_4
  depth: headingsListElemDepthQueryInt_4
  in: [markdownHeadingInputObject_4]
}

input htmlQueryString_3 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input htmlQueryString_4 {
  eq: String
  ne: String
  regex: String
  glob: String
}

"""Node of type IntegrationsJson"""
type IntegrationsJson implements Node {
  """The id of this node."""
  id: ID!

  """The parent of this node."""
  parent: Node

  """The children of this node."""
  children: [Node]
  createUrl: String
  descriptionHtml: String
  descriptionPlain: String
  path: String
  status: String
  steps: [steps_2]
  title: String
  internal: internal_9
}

"""A connection to a list of items."""
type IntegrationsJsonConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [IntegrationsJsonEdge]
  totalCount: Int
  distinct(field: integrationsJsonDistinctEnum): [String]
  group(skip: Int, limit: Int, field: integrationsJsonGroupEnum): [integrationsJsonGroupConnectionConnection]
}

input integrationsJsonConnectionCreateUrlQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input integrationsJsonConnectionDescriptionHtmlQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input integrationsJsonConnectionDescriptionPlainQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input integrationsJsonConnectionIdQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input integrationsJsonConnectionInternalContentDigestQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input integrationsJsonConnectionInternalInputObject_2 {
  contentDigest: integrationsJsonConnectionInternalContentDigestQueryString_2
  type: integrationsJsonConnectionInternalTypeQueryString_2
  owner: integrationsJsonConnectionInternalOwnerQueryString_2
}

input integrationsJsonConnectionInternalOwnerQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input integrationsJsonConnectionInternalTypeQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input integrationsJsonConnectionPathQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input integrationsJsonConnectionSort {
  fields: [IntegrationsJsonConnectionSortByFieldsEnum]!
  order: integrationsJsonConnectionSortOrderValues = ASC
}

enum IntegrationsJsonConnectionSortByFieldsEnum {
  createUrl
  descriptionHtml
  descriptionPlain
  id
  path
  status
  steps
  title
  parent
  internal___contentDigest
  internal___type
  internal___owner
}

enum integrationsJsonConnectionSortOrderValues {
  ASC
  DESC
}

input integrationsJsonConnectionStatusQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input integrationsJsonConnectionStepsColorQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input integrationsJsonConnectionStepsDescriptionQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input integrationsJsonConnectionStepsIconOriginalQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input integrationsJsonConnectionStepsIconQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input integrationsJsonConnectionStepsIdQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input integrationsJsonConnectionStepsInputObject_2 {
  color: integrationsJsonConnectionStepsColorQueryString_2
  description: integrationsJsonConnectionStepsDescriptionQueryString_2
  icon: integrationsJsonConnectionStepsIconQueryString_2
  iconOriginal: integrationsJsonConnectionStepsIconOriginalQueryString_2
  id: integrationsJsonConnectionStepsIdQueryString_2
  title: integrationsJsonConnectionStepsTitleQueryString_2
}

input integrationsJsonConnectionStepsQueryList_2 {
  in: [integrationsJsonConnectionStepsInputObject_2]
}

input integrationsJsonConnectionStepsTitleQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input integrationsJsonConnectionTitleQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input integrationsJsonCreateUrlQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input integrationsJsonDescriptionHtmlQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input integrationsJsonDescriptionPlainQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

enum integrationsJsonDistinctEnum {
  createUrl
  descriptionHtml
  descriptionPlain
  id
  path
  status
  steps
  title
  parent
  internal___contentDigest
  internal___type
  internal___owner
}

"""An edge in a connection."""
type IntegrationsJsonEdge {
  """The item at the end of the edge"""
  node: IntegrationsJson

  """The next edge in the connection"""
  next: IntegrationsJson

  """The previous edge in the connection"""
  previous: IntegrationsJson
}

"""A connection to a list of items."""
type integrationsJsonGroupConnectionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [integrationsJsonGroupConnectionEdge]
  field: String
  fieldValue: String
  totalCount: Int
}

"""An edge in a connection."""
type integrationsJsonGroupConnectionEdge {
  """The item at the end of the edge"""
  node: IntegrationsJson

  """The next edge in the connection"""
  next: IntegrationsJson

  """The previous edge in the connection"""
  previous: IntegrationsJson
}

enum integrationsJsonGroupEnum {
  createUrl
  descriptionHtml
  descriptionPlain
  id
  path
  status
  steps
  title
  parent
  internal___contentDigest
  internal___type
  internal___owner
}

input integrationsJsonIdQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input integrationsJsonInternalContentDigestQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input integrationsJsonInternalInputObject_2 {
  contentDigest: integrationsJsonInternalContentDigestQueryString_2
  type: integrationsJsonInternalTypeQueryString_2
  owner: integrationsJsonInternalOwnerQueryString_2
}

input integrationsJsonInternalOwnerQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input integrationsJsonInternalTypeQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input integrationsJsonPathQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input integrationsJsonStatusQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input integrationsJsonStepsColorQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input integrationsJsonStepsDescriptionQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input integrationsJsonStepsIconOriginalQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input integrationsJsonStepsIconQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input integrationsJsonStepsIdQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input integrationsJsonStepsInputObject_2 {
  color: integrationsJsonStepsColorQueryString_2
  description: integrationsJsonStepsDescriptionQueryString_2
  icon: integrationsJsonStepsIconQueryString_2
  iconOriginal: integrationsJsonStepsIconOriginalQueryString_2
  id: integrationsJsonStepsIdQueryString_2
  title: integrationsJsonStepsTitleQueryString_2
}

input integrationsJsonStepsQueryList_2 {
  in: [integrationsJsonStepsInputObject_2]
}

input integrationsJsonStepsTitleQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input integrationsJsonTitleQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

type internal_10 {
  contentDigest: String
  type: String
  owner: String
}

type internal_11 {
  contentDigest: String
  type: String
  description: String
  owner: String
}

type internal_12 {
  contentDigest: String
  mediaType: String
  type: String
  description: String
  owner: String
}

type internal_13 {
  content: String
  type: String
  contentDigest: String
  owner: String
}

type internal_14 {
  contentDigest: String
  type: String
  owner: String
}

type internal_15 {
  type: String
  contentDigest: String
  description: String
  owner: String
}

type internal_16 {
  contentDigest: String
  type: String
  owner: String
}

type internal_9 {
  contentDigest: String
  type: String
  owner: String
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type MarkdownHeading {
  value: String
  depth: Int
}

input markdownHeadingInputObject_3 {
  value: String
  depth: Int
}

input markdownHeadingInputObject_4 {
  value: String
  depth: Int
}

"""Node of type MarkdownRemark"""
type MarkdownRemark implements Node {
  """The id of this node."""
  id: ID!

  """The parent of this node."""
  parent: Node

  """The children of this node."""
  children: [Node]
  internal: internal_13
  frontmatter: frontmatter_2
  excerpt(pruneLength: Int = 140): String
  fileAbsolutePath: String
  html: String
  htmlAst: JSON
  headings(depth: HeadingLevels): [MarkdownHeading]
  timeToRead: Int
  tableOfContents: String
  wordCount: wordCount
}

"""A connection to a list of items."""
type MarkdownRemarkConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [MarkdownRemarkEdge]
  totalCount: Int
  distinct(field: markdownRemarkDistinctEnum): [String]
  group(skip: Int, limit: Int, field: markdownRemarkGroupEnum): [markdownRemarkGroupConnectionConnection]
}

input markdownRemarkConnectionFileAbsolutePathQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input markdownRemarkConnectionFrontmatterBreadcrumbOnlyQueryBoolean_2 {
  eq: Boolean
  ne: Boolean
}

input markdownRemarkConnectionFrontmatterDateQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input markdownRemarkConnectionFrontmatterInputObject_2 {
  title: markdownRemarkConnectionFrontmatterTitleQueryString_2
  breadcrumbOnly: markdownRemarkConnectionFrontmatterBreadcrumbOnlyQueryBoolean_2
  path: markdownRemarkConnectionFrontmatterPathQueryString_2
  _PARENT: markdownRemarkConnectionFrontmatterParentQueryString_3
  parent: markdownRemarkConnectionFrontmatterParentQueryString_4
  weight: markdownRemarkConnectionFrontmatterWeightQueryInteger_2
  date: markdownRemarkConnectionFrontmatterDateQueryString_2
}

input markdownRemarkConnectionFrontmatterParentQueryString_3 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input markdownRemarkConnectionFrontmatterParentQueryString_4 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input markdownRemarkConnectionFrontmatterPathQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input markdownRemarkConnectionFrontmatterTitleQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input markdownRemarkConnectionFrontmatterWeightQueryInteger_2 {
  eq: Int
  ne: Int
}

input markdownRemarkConnectionIdQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input markdownRemarkConnectionInternalContentDigestQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input markdownRemarkConnectionInternalContentQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input markdownRemarkConnectionInternalInputObject_2 {
  content: markdownRemarkConnectionInternalContentQueryString_2
  type: markdownRemarkConnectionInternalTypeQueryString_2
  contentDigest: markdownRemarkConnectionInternalContentDigestQueryString_2
  owner: markdownRemarkConnectionInternalOwnerQueryString_2
}

input markdownRemarkConnectionInternalOwnerQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input markdownRemarkConnectionInternalTypeQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input markdownRemarkConnectionSort {
  fields: [MarkdownRemarkConnectionSortByFieldsEnum]!
  order: markdownRemarkConnectionSortOrderValues = ASC
}

enum MarkdownRemarkConnectionSortByFieldsEnum {
  id
  parent
  internal___content
  internal___type
  internal___contentDigest
  internal___owner
  frontmatter___title
  frontmatter___breadcrumbOnly
  frontmatter___path
  frontmatter____PARENT
  frontmatter___parent
  frontmatter___weight
  frontmatter___date
  excerpt
  fileAbsolutePath
  html
  headings
  timeToRead
  tableOfContents
  wordCount___paragraphs
  wordCount___sentences
  wordCount___words
}

enum markdownRemarkConnectionSortOrderValues {
  ASC
  DESC
}

enum markdownRemarkDistinctEnum {
  id
  parent
  internal___content
  internal___type
  internal___contentDigest
  internal___owner
  frontmatter___title
  frontmatter___breadcrumbOnly
  frontmatter___path
  frontmatter____PARENT
  frontmatter___parent
  frontmatter___weight
  frontmatter___date
  excerpt
  fileAbsolutePath
}

"""An edge in a connection."""
type MarkdownRemarkEdge {
  """The item at the end of the edge"""
  node: MarkdownRemark

  """The next edge in the connection"""
  next: MarkdownRemark

  """The previous edge in the connection"""
  previous: MarkdownRemark
}

input markdownRemarkFileAbsolutePathQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input markdownRemarkFrontmatterBreadcrumbOnlyQueryBoolean_2 {
  eq: Boolean
  ne: Boolean
}

input markdownRemarkFrontmatterDateQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input markdownRemarkFrontmatterInputObject_2 {
  title: markdownRemarkFrontmatterTitleQueryString_2
  breadcrumbOnly: markdownRemarkFrontmatterBreadcrumbOnlyQueryBoolean_2
  path: markdownRemarkFrontmatterPathQueryString_2
  _PARENT: markdownRemarkFrontmatterParentQueryString_3
  parent: markdownRemarkFrontmatterParentQueryString_4
  weight: markdownRemarkFrontmatterWeightQueryInteger_2
  date: markdownRemarkFrontmatterDateQueryString_2
}

input markdownRemarkFrontmatterParentQueryString_3 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input markdownRemarkFrontmatterParentQueryString_4 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input markdownRemarkFrontmatterPathQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input markdownRemarkFrontmatterTitleQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input markdownRemarkFrontmatterWeightQueryInteger_2 {
  eq: Int
  ne: Int
}

"""A connection to a list of items."""
type markdownRemarkGroupConnectionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [markdownRemarkGroupConnectionEdge]
  field: String
  fieldValue: String
  totalCount: Int
}

"""An edge in a connection."""
type markdownRemarkGroupConnectionEdge {
  """The item at the end of the edge"""
  node: MarkdownRemark

  """The next edge in the connection"""
  next: MarkdownRemark

  """The previous edge in the connection"""
  previous: MarkdownRemark
}

enum markdownRemarkGroupEnum {
  id
  parent
  internal___content
  internal___type
  internal___contentDigest
  internal___owner
  frontmatter___title
  frontmatter___breadcrumbOnly
  frontmatter___path
  frontmatter____PARENT
  frontmatter___parent
  frontmatter___weight
  frontmatter___date
  excerpt
  fileAbsolutePath
}

input markdownRemarkIdQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input markdownRemarkInternalContentDigestQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input markdownRemarkInternalContentQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input markdownRemarkInternalInputObject_2 {
  content: markdownRemarkInternalContentQueryString_2
  type: markdownRemarkInternalTypeQueryString_2
  contentDigest: markdownRemarkInternalContentDigestQueryString_2
  owner: markdownRemarkInternalOwnerQueryString_2
}

input markdownRemarkInternalOwnerQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input markdownRemarkInternalTypeQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

"""An object with an id, parent, and children"""
interface Node {
  """The id of the node."""
  id: ID!

  """The parent of this node."""
  parent: Node

  """The children of this node."""
  children: [Node]
}

type packageJson_2 {
  name: String
  description: String
  version: String
  main: String
  author: String
  license: String
  dependencies: [dependencies_2]
  devDependencies: [devDependencies_2]
  peerDependencies: [peerDependencies_2]
  keywords: [String]
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating, are there more items?"""
  hasNextPage: Boolean!
}

type peerDependencies_2 {
  name: String
  version: String
}

type pluginOptions_3 {
  plugins: [plugins_2]
  path: String
  name: String
  offsetY: String
  backgroundColor: String
  quality: Int
  maxWidth: Int
  sizeByPixelDensity: Boolean
  anonymize: Boolean
  head: Boolean
  respectDNT: Boolean
  trackingId: String
  dsn: String
  config: config_2
  color: String
  showSpinner: Boolean
  siteUrl: String
  background_color: String
  description: String
  display: String
  icon: String
  short_name: String
  start_url: String
  theme_color: String
  policy: [policy_2]
}

type pluginOptions_4 {
  offsetY: String
  backgroundColor: String
  quality: Int
  maxWidth: Int
  sizeByPixelDensity: Boolean
}

type plugins_2 {
  resolve: String
  id: String
  name: String
  version: String
  pluginOptions: pluginOptions_4
  browserAPIs: [String]
  ssrAPIs: [String]
  pluginFilepath: String
}

type policy_2 {
  userAgent: String
  disallow: [String]
}

input publicUrlQueryString_3 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input publicUrlQueryString_4 {
  eq: String
  ne: String
  regex: String
  glob: String
}

type RootQueryType {
  """Connection to all IntegrationsJson nodes"""
  allIntegrationsJson(skip: Int, limit: Int, sort: integrationsJsonConnectionSort, filter: filterIntegrationsJson): IntegrationsJsonConnection

  """Connection to all SitePlugin nodes"""
  allSitePlugin(skip: Int, limit: Int, sort: sitePluginConnectionSort, filter: filterSitePlugin): SitePluginConnection

  """Connection to all Directory nodes"""
  allDirectory(skip: Int, limit: Int, sort: directoryConnectionSort, filter: filterDirectory): DirectoryConnection

  """Connection to all File nodes"""
  allFile(skip: Int, limit: Int, sort: fileConnectionSort, filter: filterFile): FileConnection

  """Connection to all MarkdownRemark nodes"""
  allMarkdownRemark(skip: Int, limit: Int, sort: markdownRemarkConnectionSort, filter: filterMarkdownRemark): MarkdownRemarkConnection

  """Connection to all SvgsJson nodes"""
  allSvgsJson(skip: Int, limit: Int, sort: svgsJsonConnectionSort, filter: filterSvgsJson): SvgsJsonConnection

  """Connection to all SitePage nodes"""
  allSitePage(skip: Int, limit: Int, sort: sitePageConnectionSort, filter: filterSitePage): SitePageConnection
  integrationsJson(createUrl: integrationsJsonCreateUrlQueryString_2, descriptionHtml: integrationsJsonDescriptionHtmlQueryString_2, descriptionPlain: integrationsJsonDescriptionPlainQueryString_2, id: integrationsJsonIdQueryString_2, path: integrationsJsonPathQueryString_2, status: integrationsJsonStatusQueryString_2, steps: integrationsJsonStepsQueryList_2, title: integrationsJsonTitleQueryString_2, internal: integrationsJsonInternalInputObject_2): IntegrationsJson
  sitePlugin(resolve: sitePluginResolveQueryString_2, id: sitePluginIdQueryString_2, name: sitePluginNameQueryString_2, version: sitePluginVersionQueryString_2, pluginOptions: sitePluginPluginOptionsInputObject_2, nodeAPIs: sitePluginNodeApIsQueryList_2, browserAPIs: sitePluginBrowserApIsQueryList_2, ssrAPIs: sitePluginSsrApIsQueryList_2, pluginFilepath: sitePluginPluginFilepathQueryString_2, packageJson: sitePluginPackageJsonInputObject_2, internal: sitePluginInternalInputObject_2): SitePlugin
  site(siteMetadata: siteSiteMetadataInputObject_2, port: sitePortQueryString_2, host: siteHostQueryString_2, pathPrefix: sitePathPrefixQueryString_2, polyfill: sitePolyfillQueryBoolean_2, buildTime: siteBuildTimeQueryString_2, id: siteIdQueryString_2, internal: siteInternalInputObject_2): Site
  directory(id: directoryIdQueryString_2, internal: directoryInternalInputObject_2, sourceInstanceName: directorySourceInstanceNameQueryString_2, absolutePath: directoryAbsolutePathQueryString_2, relativePath: directoryRelativePathQueryString_2, extension: directoryExtensionQueryString_2, size: directorySizeQueryInteger_2, prettySize: directoryPrettySizeQueryString_2, modifiedTime: directoryModifiedTimeQueryString_2, accessTime: directoryAccessTimeQueryString_2, changeTime: directoryChangeTimeQueryString_2, birthTime: directoryBirthTimeQueryString_2, root: directoryRootQueryString_2, dir: directoryDirQueryString_2, base: directoryBaseQueryString_2, ext: directoryExtQueryString_2, name: directoryNameQueryString_2, relativeDirectory: directoryRelativeDirectoryQueryString_2, dev: directoryDevQueryInteger_2, mode: directoryModeQueryInteger_2, nlink: directoryNlinkQueryInteger_2, uid: directoryUidQueryInteger_2, gid: directoryGidQueryInteger_2, rdev: directoryRdevQueryInteger_2, blksize: directoryBlksizeQueryInteger_2, ino: directoryInoQueryInteger_2, blocks: directoryBlocksQueryInteger_2, atimeMs: directoryAtimeMsQueryFloat_2, mtimeMs: directoryMtimeMsQueryFloat_2, ctimeMs: directoryCtimeMsQueryFloat_2, birthtimeMs: directoryBirthtimeMsQueryFloat_2, atime: directoryAtimeQueryString_2, mtime: directoryMtimeQueryString_2, ctime: directoryCtimeQueryString_2, birthtime: directoryBirthtimeQueryString_2): Directory
  file(id: fileIdQueryString_2, internal: fileInternalInputObject_2, sourceInstanceName: fileSourceInstanceNameQueryString_2, absolutePath: fileAbsolutePathQueryString_2, relativePath: fileRelativePathQueryString_2, extension: fileExtensionQueryString_2, size: fileSizeQueryInteger_2, prettySize: filePrettySizeQueryString_2, modifiedTime: fileModifiedTimeQueryString_2, accessTime: fileAccessTimeQueryString_2, changeTime: fileChangeTimeQueryString_2, birthTime: fileBirthTimeQueryString_2, root: fileRootQueryString_2, dir: fileDirQueryString_2, base: fileBaseQueryString_2, ext: fileExtQueryString_2, name: fileNameQueryString_2, relativeDirectory: fileRelativeDirectoryQueryString_2, dev: fileDevQueryInteger_2, mode: fileModeQueryInteger_2, nlink: fileNlinkQueryInteger_2, uid: fileUidQueryInteger_2, gid: fileGidQueryInteger_2, rdev: fileRdevQueryInteger_2, blksize: fileBlksizeQueryInteger_2, ino: fileInoQueryInteger_2, blocks: fileBlocksQueryInteger_2, atimeMs: fileAtimeMsQueryFloat_2, mtimeMs: fileMtimeMsQueryFloat_2, ctimeMs: fileCtimeMsQueryFloat_2, birthtimeMs: fileBirthtimeMsQueryFloat_2, atime: fileAtimeQueryString_2, mtime: fileMtimeQueryString_2, ctime: fileCtimeQueryString_2, birthtime: fileBirthtimeQueryString_2, publicURL: publicUrlQueryString_3): File
  markdownRemark(id: markdownRemarkIdQueryString_2, internal: markdownRemarkInternalInputObject_2, frontmatter: markdownRemarkFrontmatterInputObject_2, excerpt: excerptQueryString_3, fileAbsolutePath: markdownRemarkFileAbsolutePathQueryString_2, html: htmlQueryString_3, headings: headingsQueryList_3, timeToRead: timeToReadQueryInt_3, tableOfContents: tableOfContentsQueryString_3, wordCount: wordCountTypeName_3): MarkdownRemark
  svgsJson(moduleNameTemplate: svgsJsonModuleNameTemplateQueryString_2, id: svgsJsonIdQueryString_2, internal: svgsJsonInternalInputObject_2): SvgsJson
  sitePage(layout: sitePageLayoutQueryString, jsonName: sitePageJsonNameQueryString, internalComponentName: sitePageInternalComponentNameQueryString, path: sitePagePathQueryString_2, component: sitePageComponentQueryString, componentChunkName: sitePageComponentChunkNameQueryString, context: sitePageContextInputObject, pluginCreator: sitePagePluginCreatorInputObject, pluginCreatorId: sitePagePluginCreatorIdQueryString_2, componentPath: sitePageComponentPathQueryString, id: sitePageIdQueryString_2, internal: sitePageInternalInputObject_2): SitePage
}

"""Node of type Site"""
type Site implements Node {
  """The id of this node."""
  id: ID!

  """The parent of this node."""
  parent: Node

  """The children of this node."""
  children: [Node]
  siteMetadata: siteMetadata_2
  port(
    """
    Format the date using Moment.js' date tokens e.g. "date(formatString: "YYYY
    MMMM DD)" See https://momentjs.com/docs/#/displaying/format/ for
    documentation for different tokens
    """
    formatString: String

    """Returns a string generated with Moment.js' fromNow function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to
    miliseconds but you can also pass in as the measurement years, months,
    weeks, days, hours, minutes, and seconds.
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date
  host: String
  pathPrefix: String
  polyfill: Boolean
  buildTime(
    """
    Format the date using Moment.js' date tokens e.g. "date(formatString: "YYYY
    MMMM DD)" See https://momentjs.com/docs/#/displaying/format/ for
    documentation for different tokens
    """
    formatString: String

    """Returns a string generated with Moment.js' fromNow function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to
    miliseconds but you can also pass in as the measurement years, months,
    weeks, days, hours, minutes, and seconds.
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date
  internal: internal_16
}

input siteBuildTimeQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input siteHostQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input siteIdQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input siteInternalContentDigestQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input siteInternalInputObject_2 {
  contentDigest: siteInternalContentDigestQueryString_2
  type: siteInternalTypeQueryString_2
  owner: siteInternalOwnerQueryString_2
}

input siteInternalOwnerQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input siteInternalTypeQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

type siteMetadata_2 {
  siteName: String
  siteUrl: String
}

"""Node of type SitePage"""
type SitePage implements Node {
  """The id of this node."""
  id: ID!

  """The parent of this node."""
  parent: Node

  """The children of this node."""
  children: [Node]
  layout: String
  jsonName: String
  internalComponentName: String
  path: String
  component: String
  componentChunkName: String
  context: context
  pluginCreator: SitePlugin
  pluginCreatorId: String
  componentPath: String
  internal: internal_15
}

input sitePageComponentChunkNameQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePageComponentPathQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePageComponentQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
}

"""A connection to a list of items."""
type SitePageConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SitePageEdge]
  totalCount: Int
  distinct(field: sitePageDistinctEnum): [String]
  group(skip: Int, limit: Int, field: sitePageGroupEnum): [sitePageGroupConnectionConnection]
}

input sitePageConnectionComponentChunkNameQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePageConnectionComponentPathQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePageConnectionComponentQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePageConnectionContextBreadcrumbInputObject {
  title: sitePageConnectionContextBreadcrumbTitleQueryString
  path: sitePageConnectionContextBreadcrumbPathQueryString
}

input sitePageConnectionContextBreadcrumbPathQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePageConnectionContextBreadcrumbQueryList {
  in: [sitePageConnectionContextBreadcrumbInputObject]
}

input sitePageConnectionContextBreadcrumbTitleQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePageConnectionContextInputObject {
  breadcrumb: sitePageConnectionContextBreadcrumbQueryList
}

input sitePageConnectionIdQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePageConnectionInternalComponentNameQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePageConnectionInternalContentDigestQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePageConnectionInternalDescriptionQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePageConnectionInternalInputObject_2 {
  type: sitePageConnectionInternalTypeQueryString_2
  contentDigest: sitePageConnectionInternalContentDigestQueryString_2
  description: sitePageConnectionInternalDescriptionQueryString
  owner: sitePageConnectionInternalOwnerQueryString_2
}

input sitePageConnectionInternalOwnerQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePageConnectionInternalTypeQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePageConnectionJsonNameQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePageConnectionLayoutQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePageConnectionPathQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePageConnectionPluginCreatorBrowserApIsQueryList {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
}

input sitePageConnectionPluginCreatorIdQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePageConnectionPluginCreatorIdQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePageConnectionPluginCreatorInputObject {
  resolve: sitePageConnectionPluginCreatorResolveQueryString
  id: sitePageConnectionPluginCreatorIdQueryString
  name: sitePageConnectionPluginCreatorNameQueryString
  version: sitePageConnectionPluginCreatorVersionQueryString
  pluginOptions: sitePageConnectionPluginCreatorPluginOptionsInputObject
  nodeAPIs: sitePageConnectionPluginCreatorNodeApIsQueryList
  browserAPIs: sitePageConnectionPluginCreatorBrowserApIsQueryList
  ssrAPIs: sitePageConnectionPluginCreatorSsrApIsQueryList
  pluginFilepath: sitePageConnectionPluginCreatorPluginFilepathQueryString
  packageJson: sitePageConnectionPluginCreatorPackageJsonInputObject
  parent: sitePageConnectionPluginCreatorParentQueryString
  internal: sitePageConnectionPluginCreatorInternalInputObject
}

input sitePageConnectionPluginCreatorInternalContentDigestQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePageConnectionPluginCreatorInternalInputObject {
  contentDigest: sitePageConnectionPluginCreatorInternalContentDigestQueryString
  type: sitePageConnectionPluginCreatorInternalTypeQueryString
  owner: sitePageConnectionPluginCreatorInternalOwnerQueryString
}

input sitePageConnectionPluginCreatorInternalOwnerQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePageConnectionPluginCreatorInternalTypeQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePageConnectionPluginCreatorNameQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePageConnectionPluginCreatorNodeApIsQueryList {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
}

input sitePageConnectionPluginCreatorPackageJsonAuthorQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePageConnectionPluginCreatorPackageJsonDependenciesInputObject {
  name: sitePageConnectionPluginCreatorPackageJsonDependenciesNameQueryString
  version: sitePageConnectionPluginCreatorPackageJsonDependenciesVersionQueryString
}

input sitePageConnectionPluginCreatorPackageJsonDependenciesNameQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePageConnectionPluginCreatorPackageJsonDependenciesQueryList {
  in: [sitePageConnectionPluginCreatorPackageJsonDependenciesInputObject]
}

input sitePageConnectionPluginCreatorPackageJsonDependenciesVersionQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePageConnectionPluginCreatorPackageJsonDescriptionQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePageConnectionPluginCreatorPackageJsonDevDependenciesInputObject {
  name: sitePageConnectionPluginCreatorPackageJsonDevDependenciesNameQueryString
  version: sitePageConnectionPluginCreatorPackageJsonDevDependenciesVersionQueryString
}

input sitePageConnectionPluginCreatorPackageJsonDevDependenciesNameQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePageConnectionPluginCreatorPackageJsonDevDependenciesQueryList {
  in: [sitePageConnectionPluginCreatorPackageJsonDevDependenciesInputObject]
}

input sitePageConnectionPluginCreatorPackageJsonDevDependenciesVersionQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePageConnectionPluginCreatorPackageJsonInputObject {
  name: sitePageConnectionPluginCreatorPackageJsonNameQueryString
  description: sitePageConnectionPluginCreatorPackageJsonDescriptionQueryString
  version: sitePageConnectionPluginCreatorPackageJsonVersionQueryString
  main: sitePageConnectionPluginCreatorPackageJsonMainQueryString
  author: sitePageConnectionPluginCreatorPackageJsonAuthorQueryString
  license: sitePageConnectionPluginCreatorPackageJsonLicenseQueryString
  dependencies: sitePageConnectionPluginCreatorPackageJsonDependenciesQueryList
  devDependencies: sitePageConnectionPluginCreatorPackageJsonDevDependenciesQueryList
  peerDependencies: sitePageConnectionPluginCreatorPackageJsonPeerDependenciesQueryList
  keywords: sitePageConnectionPluginCreatorPackageJsonKeywordsQueryList
}

input sitePageConnectionPluginCreatorPackageJsonKeywordsQueryList {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
}

input sitePageConnectionPluginCreatorPackageJsonLicenseQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePageConnectionPluginCreatorPackageJsonMainQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePageConnectionPluginCreatorPackageJsonNameQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePageConnectionPluginCreatorPackageJsonPeerDependenciesInputObject {
  name: sitePageConnectionPluginCreatorPackageJsonPeerDependenciesNameQueryString
  version: sitePageConnectionPluginCreatorPackageJsonPeerDependenciesVersionQueryString
}

input sitePageConnectionPluginCreatorPackageJsonPeerDependenciesNameQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePageConnectionPluginCreatorPackageJsonPeerDependenciesQueryList {
  in: [sitePageConnectionPluginCreatorPackageJsonPeerDependenciesInputObject]
}

input sitePageConnectionPluginCreatorPackageJsonPeerDependenciesVersionQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePageConnectionPluginCreatorPackageJsonVersionQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePageConnectionPluginCreatorParentQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePageConnectionPluginCreatorPluginFilepathQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePageConnectionPluginCreatorPluginOptionsAnonymizeQueryBoolean {
  eq: Boolean
  ne: Boolean
}

input sitePageConnectionPluginCreatorPluginOptionsBackgroundColorQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePageConnectionPluginCreatorPluginOptionsBackgroundColorQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePageConnectionPluginCreatorPluginOptionsColorQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePageConnectionPluginCreatorPluginOptionsConfigInputObject {
  version: sitePageConnectionPluginCreatorPluginOptionsConfigVersionQueryString
}

input sitePageConnectionPluginCreatorPluginOptionsConfigVersionQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePageConnectionPluginCreatorPluginOptionsDescriptionQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePageConnectionPluginCreatorPluginOptionsDisplayQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePageConnectionPluginCreatorPluginOptionsDsnQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePageConnectionPluginCreatorPluginOptionsHeadQueryBoolean {
  eq: Boolean
  ne: Boolean
}

input sitePageConnectionPluginCreatorPluginOptionsIconQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePageConnectionPluginCreatorPluginOptionsInputObject {
  plugins: sitePageConnectionPluginCreatorPluginOptionsPluginsQueryList
  path: sitePageConnectionPluginCreatorPluginOptionsPathQueryString
  name: sitePageConnectionPluginCreatorPluginOptionsNameQueryString
  offsetY: sitePageConnectionPluginCreatorPluginOptionsOffsetYQueryString
  backgroundColor: sitePageConnectionPluginCreatorPluginOptionsBackgroundColorQueryString
  quality: sitePageConnectionPluginCreatorPluginOptionsQualityQueryInteger
  maxWidth: sitePageConnectionPluginCreatorPluginOptionsMaxWidthQueryInteger
  sizeByPixelDensity: sitePageConnectionPluginCreatorPluginOptionsSizeByPixelDensityQueryBoolean
  anonymize: sitePageConnectionPluginCreatorPluginOptionsAnonymizeQueryBoolean
  head: sitePageConnectionPluginCreatorPluginOptionsHeadQueryBoolean
  respectDNT: sitePageConnectionPluginCreatorPluginOptionsRespectDntQueryBoolean
  trackingId: sitePageConnectionPluginCreatorPluginOptionsTrackingIdQueryString
  dsn: sitePageConnectionPluginCreatorPluginOptionsDsnQueryString
  config: sitePageConnectionPluginCreatorPluginOptionsConfigInputObject
  color: sitePageConnectionPluginCreatorPluginOptionsColorQueryString
  showSpinner: sitePageConnectionPluginCreatorPluginOptionsShowSpinnerQueryBoolean
  siteUrl: sitePageConnectionPluginCreatorPluginOptionsSiteUrlQueryString
  background_color: sitePageConnectionPluginCreatorPluginOptionsBackgroundColorQueryString_2
  description: sitePageConnectionPluginCreatorPluginOptionsDescriptionQueryString
  display: sitePageConnectionPluginCreatorPluginOptionsDisplayQueryString
  icon: sitePageConnectionPluginCreatorPluginOptionsIconQueryString
  short_name: sitePageConnectionPluginCreatorPluginOptionsShortNameQueryString
  start_url: sitePageConnectionPluginCreatorPluginOptionsStartUrlQueryString
  theme_color: sitePageConnectionPluginCreatorPluginOptionsThemeColorQueryString
  policy: sitePageConnectionPluginCreatorPluginOptionsPolicyQueryList
}

input sitePageConnectionPluginCreatorPluginOptionsMaxWidthQueryInteger {
  eq: Int
  ne: Int
}

input sitePageConnectionPluginCreatorPluginOptionsNameQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePageConnectionPluginCreatorPluginOptionsOffsetYQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePageConnectionPluginCreatorPluginOptionsPathQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePageConnectionPluginCreatorPluginOptionsPluginsBrowserApIsQueryList {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
}

input sitePageConnectionPluginCreatorPluginOptionsPluginsIdQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePageConnectionPluginCreatorPluginOptionsPluginsInputObject {
  resolve: sitePageConnectionPluginCreatorPluginOptionsPluginsResolveQueryString
  id: sitePageConnectionPluginCreatorPluginOptionsPluginsIdQueryString
  name: sitePageConnectionPluginCreatorPluginOptionsPluginsNameQueryString
  version: sitePageConnectionPluginCreatorPluginOptionsPluginsVersionQueryString
  pluginOptions: sitePageConnectionPluginCreatorPluginOptionsPluginsPluginOptionsInputObject
  browserAPIs: sitePageConnectionPluginCreatorPluginOptionsPluginsBrowserApIsQueryList
  ssrAPIs: sitePageConnectionPluginCreatorPluginOptionsPluginsSsrApIsQueryList
  pluginFilepath: sitePageConnectionPluginCreatorPluginOptionsPluginsPluginFilepathQueryString
}

input sitePageConnectionPluginCreatorPluginOptionsPluginsNameQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePageConnectionPluginCreatorPluginOptionsPluginsPluginFilepathQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePageConnectionPluginCreatorPluginOptionsPluginsPluginOptionsBackgroundColorQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePageConnectionPluginCreatorPluginOptionsPluginsPluginOptionsInputObject {
  offsetY: sitePageConnectionPluginCreatorPluginOptionsPluginsPluginOptionsOffsetYQueryString
  backgroundColor: sitePageConnectionPluginCreatorPluginOptionsPluginsPluginOptionsBackgroundColorQueryString
  quality: sitePageConnectionPluginCreatorPluginOptionsPluginsPluginOptionsQualityQueryInteger
  maxWidth: sitePageConnectionPluginCreatorPluginOptionsPluginsPluginOptionsMaxWidthQueryInteger
  sizeByPixelDensity: sitePageConnectionPluginCreatorPluginOptionsPluginsPluginOptionsSizeByPixelDensityQueryBoolean
}

input sitePageConnectionPluginCreatorPluginOptionsPluginsPluginOptionsMaxWidthQueryInteger {
  eq: Int
  ne: Int
}

input sitePageConnectionPluginCreatorPluginOptionsPluginsPluginOptionsOffsetYQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePageConnectionPluginCreatorPluginOptionsPluginsPluginOptionsQualityQueryInteger {
  eq: Int
  ne: Int
}

input sitePageConnectionPluginCreatorPluginOptionsPluginsPluginOptionsSizeByPixelDensityQueryBoolean {
  eq: Boolean
  ne: Boolean
}

input sitePageConnectionPluginCreatorPluginOptionsPluginsQueryList {
  in: [sitePageConnectionPluginCreatorPluginOptionsPluginsInputObject]
}

input sitePageConnectionPluginCreatorPluginOptionsPluginsResolveQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePageConnectionPluginCreatorPluginOptionsPluginsSsrApIsQueryList {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
}

input sitePageConnectionPluginCreatorPluginOptionsPluginsVersionQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePageConnectionPluginCreatorPluginOptionsPolicyDisallowQueryList {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
}

input sitePageConnectionPluginCreatorPluginOptionsPolicyInputObject {
  userAgent: sitePageConnectionPluginCreatorPluginOptionsPolicyUserAgentQueryString
  disallow: sitePageConnectionPluginCreatorPluginOptionsPolicyDisallowQueryList
}

input sitePageConnectionPluginCreatorPluginOptionsPolicyQueryList {
  in: [sitePageConnectionPluginCreatorPluginOptionsPolicyInputObject]
}

input sitePageConnectionPluginCreatorPluginOptionsPolicyUserAgentQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePageConnectionPluginCreatorPluginOptionsQualityQueryInteger {
  eq: Int
  ne: Int
}

input sitePageConnectionPluginCreatorPluginOptionsRespectDntQueryBoolean {
  eq: Boolean
  ne: Boolean
}

input sitePageConnectionPluginCreatorPluginOptionsShortNameQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePageConnectionPluginCreatorPluginOptionsShowSpinnerQueryBoolean {
  eq: Boolean
  ne: Boolean
}

input sitePageConnectionPluginCreatorPluginOptionsSiteUrlQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePageConnectionPluginCreatorPluginOptionsSizeByPixelDensityQueryBoolean {
  eq: Boolean
  ne: Boolean
}

input sitePageConnectionPluginCreatorPluginOptionsStartUrlQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePageConnectionPluginCreatorPluginOptionsThemeColorQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePageConnectionPluginCreatorPluginOptionsTrackingIdQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePageConnectionPluginCreatorResolveQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePageConnectionPluginCreatorSsrApIsQueryList {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
}

input sitePageConnectionPluginCreatorVersionQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePageConnectionSort {
  fields: [SitePageConnectionSortByFieldsEnum]!
  order: sitePageConnectionSortOrderValues = ASC
}

enum SitePageConnectionSortByFieldsEnum {
  layout
  jsonName
  internalComponentName
  path
  component
  componentChunkName
  context___breadcrumb
  pluginCreator___NODE
  pluginCreatorId
  componentPath
  id
  parent
  internal___type
  internal___contentDigest
  internal___description
  internal___owner
}

enum sitePageConnectionSortOrderValues {
  ASC
  DESC
}

input sitePageContextBreadcrumbInputObject {
  title: sitePageContextBreadcrumbTitleQueryString
  path: sitePageContextBreadcrumbPathQueryString
}

input sitePageContextBreadcrumbPathQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePageContextBreadcrumbQueryList {
  in: [sitePageContextBreadcrumbInputObject]
}

input sitePageContextBreadcrumbTitleQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePageContextInputObject {
  breadcrumb: sitePageContextBreadcrumbQueryList
}

enum sitePageDistinctEnum {
  layout
  jsonName
  internalComponentName
  path
  component
  componentChunkName
  context___breadcrumb
  pluginCreator___NODE
  pluginCreatorId
  componentPath
  id
  parent
  internal___type
  internal___contentDigest
  internal___description
  internal___owner
}

"""An edge in a connection."""
type SitePageEdge {
  """The item at the end of the edge"""
  node: SitePage

  """The next edge in the connection"""
  next: SitePage

  """The previous edge in the connection"""
  previous: SitePage
}

"""A connection to a list of items."""
type sitePageGroupConnectionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [sitePageGroupConnectionEdge]
  field: String
  fieldValue: String
  totalCount: Int
}

"""An edge in a connection."""
type sitePageGroupConnectionEdge {
  """The item at the end of the edge"""
  node: SitePage

  """The next edge in the connection"""
  next: SitePage

  """The previous edge in the connection"""
  previous: SitePage
}

enum sitePageGroupEnum {
  layout
  jsonName
  internalComponentName
  path
  component
  componentChunkName
  context___breadcrumb
  pluginCreator___NODE
  pluginCreatorId
  componentPath
  id
  parent
  internal___type
  internal___contentDigest
  internal___description
  internal___owner
}

input sitePageIdQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePageInternalComponentNameQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePageInternalContentDigestQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePageInternalDescriptionQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePageInternalInputObject_2 {
  type: sitePageInternalTypeQueryString_2
  contentDigest: sitePageInternalContentDigestQueryString_2
  description: sitePageInternalDescriptionQueryString
  owner: sitePageInternalOwnerQueryString_2
}

input sitePageInternalOwnerQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePageInternalTypeQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePageJsonNameQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePageLayoutQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePagePathQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePagePluginCreatorBrowserApIsQueryList {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
}

input sitePagePluginCreatorIdQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePagePluginCreatorIdQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePagePluginCreatorInputObject {
  resolve: sitePagePluginCreatorResolveQueryString
  id: sitePagePluginCreatorIdQueryString
  name: sitePagePluginCreatorNameQueryString
  version: sitePagePluginCreatorVersionQueryString
  pluginOptions: sitePagePluginCreatorPluginOptionsInputObject
  nodeAPIs: sitePagePluginCreatorNodeApIsQueryList
  browserAPIs: sitePagePluginCreatorBrowserApIsQueryList
  ssrAPIs: sitePagePluginCreatorSsrApIsQueryList
  pluginFilepath: sitePagePluginCreatorPluginFilepathQueryString
  packageJson: sitePagePluginCreatorPackageJsonInputObject
  parent: sitePagePluginCreatorParentQueryString
  internal: sitePagePluginCreatorInternalInputObject
}

input sitePagePluginCreatorInternalContentDigestQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePagePluginCreatorInternalInputObject {
  contentDigest: sitePagePluginCreatorInternalContentDigestQueryString
  type: sitePagePluginCreatorInternalTypeQueryString
  owner: sitePagePluginCreatorInternalOwnerQueryString
}

input sitePagePluginCreatorInternalOwnerQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePagePluginCreatorInternalTypeQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePagePluginCreatorNameQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePagePluginCreatorNodeApIsQueryList {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
}

input sitePagePluginCreatorPackageJsonAuthorQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePagePluginCreatorPackageJsonDependenciesInputObject {
  name: sitePagePluginCreatorPackageJsonDependenciesNameQueryString
  version: sitePagePluginCreatorPackageJsonDependenciesVersionQueryString
}

input sitePagePluginCreatorPackageJsonDependenciesNameQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePagePluginCreatorPackageJsonDependenciesQueryList {
  in: [sitePagePluginCreatorPackageJsonDependenciesInputObject]
}

input sitePagePluginCreatorPackageJsonDependenciesVersionQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePagePluginCreatorPackageJsonDescriptionQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePagePluginCreatorPackageJsonDevDependenciesInputObject {
  name: sitePagePluginCreatorPackageJsonDevDependenciesNameQueryString
  version: sitePagePluginCreatorPackageJsonDevDependenciesVersionQueryString
}

input sitePagePluginCreatorPackageJsonDevDependenciesNameQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePagePluginCreatorPackageJsonDevDependenciesQueryList {
  in: [sitePagePluginCreatorPackageJsonDevDependenciesInputObject]
}

input sitePagePluginCreatorPackageJsonDevDependenciesVersionQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePagePluginCreatorPackageJsonInputObject {
  name: sitePagePluginCreatorPackageJsonNameQueryString
  description: sitePagePluginCreatorPackageJsonDescriptionQueryString
  version: sitePagePluginCreatorPackageJsonVersionQueryString
  main: sitePagePluginCreatorPackageJsonMainQueryString
  author: sitePagePluginCreatorPackageJsonAuthorQueryString
  license: sitePagePluginCreatorPackageJsonLicenseQueryString
  dependencies: sitePagePluginCreatorPackageJsonDependenciesQueryList
  devDependencies: sitePagePluginCreatorPackageJsonDevDependenciesQueryList
  peerDependencies: sitePagePluginCreatorPackageJsonPeerDependenciesQueryList
  keywords: sitePagePluginCreatorPackageJsonKeywordsQueryList
}

input sitePagePluginCreatorPackageJsonKeywordsQueryList {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
}

input sitePagePluginCreatorPackageJsonLicenseQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePagePluginCreatorPackageJsonMainQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePagePluginCreatorPackageJsonNameQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePagePluginCreatorPackageJsonPeerDependenciesInputObject {
  name: sitePagePluginCreatorPackageJsonPeerDependenciesNameQueryString
  version: sitePagePluginCreatorPackageJsonPeerDependenciesVersionQueryString
}

input sitePagePluginCreatorPackageJsonPeerDependenciesNameQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePagePluginCreatorPackageJsonPeerDependenciesQueryList {
  in: [sitePagePluginCreatorPackageJsonPeerDependenciesInputObject]
}

input sitePagePluginCreatorPackageJsonPeerDependenciesVersionQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePagePluginCreatorPackageJsonVersionQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePagePluginCreatorParentQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePagePluginCreatorPluginFilepathQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePagePluginCreatorPluginOptionsAnonymizeQueryBoolean {
  eq: Boolean
  ne: Boolean
}

input sitePagePluginCreatorPluginOptionsBackgroundColorQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePagePluginCreatorPluginOptionsBackgroundColorQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePagePluginCreatorPluginOptionsColorQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePagePluginCreatorPluginOptionsConfigInputObject {
  version: sitePagePluginCreatorPluginOptionsConfigVersionQueryString
}

input sitePagePluginCreatorPluginOptionsConfigVersionQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePagePluginCreatorPluginOptionsDescriptionQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePagePluginCreatorPluginOptionsDisplayQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePagePluginCreatorPluginOptionsDsnQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePagePluginCreatorPluginOptionsHeadQueryBoolean {
  eq: Boolean
  ne: Boolean
}

input sitePagePluginCreatorPluginOptionsIconQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePagePluginCreatorPluginOptionsInputObject {
  plugins: sitePagePluginCreatorPluginOptionsPluginsQueryList
  path: sitePagePluginCreatorPluginOptionsPathQueryString
  name: sitePagePluginCreatorPluginOptionsNameQueryString
  offsetY: sitePagePluginCreatorPluginOptionsOffsetYQueryString
  backgroundColor: sitePagePluginCreatorPluginOptionsBackgroundColorQueryString
  quality: sitePagePluginCreatorPluginOptionsQualityQueryInteger
  maxWidth: sitePagePluginCreatorPluginOptionsMaxWidthQueryInteger
  sizeByPixelDensity: sitePagePluginCreatorPluginOptionsSizeByPixelDensityQueryBoolean
  anonymize: sitePagePluginCreatorPluginOptionsAnonymizeQueryBoolean
  head: sitePagePluginCreatorPluginOptionsHeadQueryBoolean
  respectDNT: sitePagePluginCreatorPluginOptionsRespectDntQueryBoolean
  trackingId: sitePagePluginCreatorPluginOptionsTrackingIdQueryString
  dsn: sitePagePluginCreatorPluginOptionsDsnQueryString
  config: sitePagePluginCreatorPluginOptionsConfigInputObject
  color: sitePagePluginCreatorPluginOptionsColorQueryString
  showSpinner: sitePagePluginCreatorPluginOptionsShowSpinnerQueryBoolean
  siteUrl: sitePagePluginCreatorPluginOptionsSiteUrlQueryString
  background_color: sitePagePluginCreatorPluginOptionsBackgroundColorQueryString_2
  description: sitePagePluginCreatorPluginOptionsDescriptionQueryString
  display: sitePagePluginCreatorPluginOptionsDisplayQueryString
  icon: sitePagePluginCreatorPluginOptionsIconQueryString
  short_name: sitePagePluginCreatorPluginOptionsShortNameQueryString
  start_url: sitePagePluginCreatorPluginOptionsStartUrlQueryString
  theme_color: sitePagePluginCreatorPluginOptionsThemeColorQueryString
  policy: sitePagePluginCreatorPluginOptionsPolicyQueryList
}

input sitePagePluginCreatorPluginOptionsMaxWidthQueryInteger {
  eq: Int
  ne: Int
}

input sitePagePluginCreatorPluginOptionsNameQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePagePluginCreatorPluginOptionsOffsetYQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePagePluginCreatorPluginOptionsPathQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePagePluginCreatorPluginOptionsPluginsBrowserApIsQueryList {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
}

input sitePagePluginCreatorPluginOptionsPluginsIdQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePagePluginCreatorPluginOptionsPluginsInputObject {
  resolve: sitePagePluginCreatorPluginOptionsPluginsResolveQueryString
  id: sitePagePluginCreatorPluginOptionsPluginsIdQueryString
  name: sitePagePluginCreatorPluginOptionsPluginsNameQueryString
  version: sitePagePluginCreatorPluginOptionsPluginsVersionQueryString
  pluginOptions: sitePagePluginCreatorPluginOptionsPluginsPluginOptionsInputObject
  browserAPIs: sitePagePluginCreatorPluginOptionsPluginsBrowserApIsQueryList
  ssrAPIs: sitePagePluginCreatorPluginOptionsPluginsSsrApIsQueryList
  pluginFilepath: sitePagePluginCreatorPluginOptionsPluginsPluginFilepathQueryString
}

input sitePagePluginCreatorPluginOptionsPluginsNameQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePagePluginCreatorPluginOptionsPluginsPluginFilepathQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePagePluginCreatorPluginOptionsPluginsPluginOptionsBackgroundColorQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePagePluginCreatorPluginOptionsPluginsPluginOptionsInputObject {
  offsetY: sitePagePluginCreatorPluginOptionsPluginsPluginOptionsOffsetYQueryString
  backgroundColor: sitePagePluginCreatorPluginOptionsPluginsPluginOptionsBackgroundColorQueryString
  quality: sitePagePluginCreatorPluginOptionsPluginsPluginOptionsQualityQueryInteger
  maxWidth: sitePagePluginCreatorPluginOptionsPluginsPluginOptionsMaxWidthQueryInteger
  sizeByPixelDensity: sitePagePluginCreatorPluginOptionsPluginsPluginOptionsSizeByPixelDensityQueryBoolean
}

input sitePagePluginCreatorPluginOptionsPluginsPluginOptionsMaxWidthQueryInteger {
  eq: Int
  ne: Int
}

input sitePagePluginCreatorPluginOptionsPluginsPluginOptionsOffsetYQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePagePluginCreatorPluginOptionsPluginsPluginOptionsQualityQueryInteger {
  eq: Int
  ne: Int
}

input sitePagePluginCreatorPluginOptionsPluginsPluginOptionsSizeByPixelDensityQueryBoolean {
  eq: Boolean
  ne: Boolean
}

input sitePagePluginCreatorPluginOptionsPluginsQueryList {
  in: [sitePagePluginCreatorPluginOptionsPluginsInputObject]
}

input sitePagePluginCreatorPluginOptionsPluginsResolveQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePagePluginCreatorPluginOptionsPluginsSsrApIsQueryList {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
}

input sitePagePluginCreatorPluginOptionsPluginsVersionQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePagePluginCreatorPluginOptionsPolicyDisallowQueryList {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
}

input sitePagePluginCreatorPluginOptionsPolicyInputObject {
  userAgent: sitePagePluginCreatorPluginOptionsPolicyUserAgentQueryString
  disallow: sitePagePluginCreatorPluginOptionsPolicyDisallowQueryList
}

input sitePagePluginCreatorPluginOptionsPolicyQueryList {
  in: [sitePagePluginCreatorPluginOptionsPolicyInputObject]
}

input sitePagePluginCreatorPluginOptionsPolicyUserAgentQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePagePluginCreatorPluginOptionsQualityQueryInteger {
  eq: Int
  ne: Int
}

input sitePagePluginCreatorPluginOptionsRespectDntQueryBoolean {
  eq: Boolean
  ne: Boolean
}

input sitePagePluginCreatorPluginOptionsShortNameQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePagePluginCreatorPluginOptionsShowSpinnerQueryBoolean {
  eq: Boolean
  ne: Boolean
}

input sitePagePluginCreatorPluginOptionsSiteUrlQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePagePluginCreatorPluginOptionsSizeByPixelDensityQueryBoolean {
  eq: Boolean
  ne: Boolean
}

input sitePagePluginCreatorPluginOptionsStartUrlQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePagePluginCreatorPluginOptionsThemeColorQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePagePluginCreatorPluginOptionsTrackingIdQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePagePluginCreatorResolveQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePagePluginCreatorSsrApIsQueryList {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
}

input sitePagePluginCreatorVersionQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePathPrefixQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

"""Node of type SitePlugin"""
type SitePlugin implements Node {
  """The id of this node."""
  id: ID!

  """The parent of this node."""
  parent: Node

  """The children of this node."""
  children: [Node]
  resolve: String
  name: String
  version: String
  pluginOptions: pluginOptions_3
  nodeAPIs: [String]
  browserAPIs: [String]
  ssrAPIs: [String]
  pluginFilepath: String
  packageJson: packageJson_2
  internal: internal_10
}

input sitePluginBrowserApIsQueryList_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
}

"""A connection to a list of items."""
type SitePluginConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SitePluginEdge]
  totalCount: Int
  distinct(field: sitePluginDistinctEnum): [String]
  group(skip: Int, limit: Int, field: sitePluginGroupEnum): [sitePluginGroupConnectionConnection]
}

input sitePluginConnectionBrowserApIsQueryList_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
}

input sitePluginConnectionIdQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePluginConnectionInternalContentDigestQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePluginConnectionInternalInputObject_2 {
  contentDigest: sitePluginConnectionInternalContentDigestQueryString_2
  type: sitePluginConnectionInternalTypeQueryString_2
  owner: sitePluginConnectionInternalOwnerQueryString_2
}

input sitePluginConnectionInternalOwnerQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePluginConnectionInternalTypeQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePluginConnectionNameQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePluginConnectionNodeApIsQueryList_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
}

input sitePluginConnectionPackageJsonAuthorQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePluginConnectionPackageJsonDependenciesInputObject_2 {
  name: sitePluginConnectionPackageJsonDependenciesNameQueryString_2
  version: sitePluginConnectionPackageJsonDependenciesVersionQueryString_2
}

input sitePluginConnectionPackageJsonDependenciesNameQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePluginConnectionPackageJsonDependenciesQueryList_2 {
  in: [sitePluginConnectionPackageJsonDependenciesInputObject_2]
}

input sitePluginConnectionPackageJsonDependenciesVersionQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePluginConnectionPackageJsonDescriptionQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePluginConnectionPackageJsonDevDependenciesInputObject_2 {
  name: sitePluginConnectionPackageJsonDevDependenciesNameQueryString_2
  version: sitePluginConnectionPackageJsonDevDependenciesVersionQueryString_2
}

input sitePluginConnectionPackageJsonDevDependenciesNameQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePluginConnectionPackageJsonDevDependenciesQueryList_2 {
  in: [sitePluginConnectionPackageJsonDevDependenciesInputObject_2]
}

input sitePluginConnectionPackageJsonDevDependenciesVersionQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePluginConnectionPackageJsonInputObject_2 {
  name: sitePluginConnectionPackageJsonNameQueryString_2
  description: sitePluginConnectionPackageJsonDescriptionQueryString_2
  version: sitePluginConnectionPackageJsonVersionQueryString_2
  main: sitePluginConnectionPackageJsonMainQueryString_2
  author: sitePluginConnectionPackageJsonAuthorQueryString_2
  license: sitePluginConnectionPackageJsonLicenseQueryString_2
  dependencies: sitePluginConnectionPackageJsonDependenciesQueryList_2
  devDependencies: sitePluginConnectionPackageJsonDevDependenciesQueryList_2
  peerDependencies: sitePluginConnectionPackageJsonPeerDependenciesQueryList_2
  keywords: sitePluginConnectionPackageJsonKeywordsQueryList_2
}

input sitePluginConnectionPackageJsonKeywordsQueryList_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
}

input sitePluginConnectionPackageJsonLicenseQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePluginConnectionPackageJsonMainQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePluginConnectionPackageJsonNameQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePluginConnectionPackageJsonPeerDependenciesInputObject_2 {
  name: sitePluginConnectionPackageJsonPeerDependenciesNameQueryString_2
  version: sitePluginConnectionPackageJsonPeerDependenciesVersionQueryString_2
}

input sitePluginConnectionPackageJsonPeerDependenciesNameQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePluginConnectionPackageJsonPeerDependenciesQueryList_2 {
  in: [sitePluginConnectionPackageJsonPeerDependenciesInputObject_2]
}

input sitePluginConnectionPackageJsonPeerDependenciesVersionQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePluginConnectionPackageJsonVersionQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePluginConnectionPluginFilepathQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePluginConnectionPluginOptionsAnonymizeQueryBoolean_2 {
  eq: Boolean
  ne: Boolean
}

input sitePluginConnectionPluginOptionsBackgroundColorQueryString_3 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePluginConnectionPluginOptionsBackgroundColorQueryString_4 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePluginConnectionPluginOptionsColorQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePluginConnectionPluginOptionsConfigInputObject_2 {
  version: sitePluginConnectionPluginOptionsConfigVersionQueryString_2
}

input sitePluginConnectionPluginOptionsConfigVersionQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePluginConnectionPluginOptionsDescriptionQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePluginConnectionPluginOptionsDisplayQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePluginConnectionPluginOptionsDsnQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePluginConnectionPluginOptionsHeadQueryBoolean_2 {
  eq: Boolean
  ne: Boolean
}

input sitePluginConnectionPluginOptionsIconQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePluginConnectionPluginOptionsInputObject_2 {
  plugins: sitePluginConnectionPluginOptionsPluginsQueryList_2
  path: sitePluginConnectionPluginOptionsPathQueryString_2
  name: sitePluginConnectionPluginOptionsNameQueryString_2
  offsetY: sitePluginConnectionPluginOptionsOffsetYQueryString_2
  backgroundColor: sitePluginConnectionPluginOptionsBackgroundColorQueryString_3
  quality: sitePluginConnectionPluginOptionsQualityQueryInteger_2
  maxWidth: sitePluginConnectionPluginOptionsMaxWidthQueryInteger_2
  sizeByPixelDensity: sitePluginConnectionPluginOptionsSizeByPixelDensityQueryBoolean_2
  anonymize: sitePluginConnectionPluginOptionsAnonymizeQueryBoolean_2
  head: sitePluginConnectionPluginOptionsHeadQueryBoolean_2
  respectDNT: sitePluginConnectionPluginOptionsRespectDntQueryBoolean_2
  trackingId: sitePluginConnectionPluginOptionsTrackingIdQueryString_2
  dsn: sitePluginConnectionPluginOptionsDsnQueryString_2
  config: sitePluginConnectionPluginOptionsConfigInputObject_2
  color: sitePluginConnectionPluginOptionsColorQueryString_2
  showSpinner: sitePluginConnectionPluginOptionsShowSpinnerQueryBoolean_2
  siteUrl: sitePluginConnectionPluginOptionsSiteUrlQueryString_2
  background_color: sitePluginConnectionPluginOptionsBackgroundColorQueryString_4
  description: sitePluginConnectionPluginOptionsDescriptionQueryString_2
  display: sitePluginConnectionPluginOptionsDisplayQueryString_2
  icon: sitePluginConnectionPluginOptionsIconQueryString_2
  short_name: sitePluginConnectionPluginOptionsShortNameQueryString_2
  start_url: sitePluginConnectionPluginOptionsStartUrlQueryString_2
  theme_color: sitePluginConnectionPluginOptionsThemeColorQueryString_2
  policy: sitePluginConnectionPluginOptionsPolicyQueryList_2
}

input sitePluginConnectionPluginOptionsMaxWidthQueryInteger_2 {
  eq: Int
  ne: Int
}

input sitePluginConnectionPluginOptionsNameQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePluginConnectionPluginOptionsOffsetYQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePluginConnectionPluginOptionsPathQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePluginConnectionPluginOptionsPluginsBrowserApIsQueryList_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
}

input sitePluginConnectionPluginOptionsPluginsIdQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePluginConnectionPluginOptionsPluginsInputObject_2 {
  resolve: sitePluginConnectionPluginOptionsPluginsResolveQueryString_2
  id: sitePluginConnectionPluginOptionsPluginsIdQueryString_2
  name: sitePluginConnectionPluginOptionsPluginsNameQueryString_2
  version: sitePluginConnectionPluginOptionsPluginsVersionQueryString_2
  pluginOptions: sitePluginConnectionPluginOptionsPluginsPluginOptionsInputObject_2
  browserAPIs: sitePluginConnectionPluginOptionsPluginsBrowserApIsQueryList_2
  ssrAPIs: sitePluginConnectionPluginOptionsPluginsSsrApIsQueryList_2
  pluginFilepath: sitePluginConnectionPluginOptionsPluginsPluginFilepathQueryString_2
}

input sitePluginConnectionPluginOptionsPluginsNameQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePluginConnectionPluginOptionsPluginsPluginFilepathQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePluginConnectionPluginOptionsPluginsPluginOptionsBackgroundColorQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePluginConnectionPluginOptionsPluginsPluginOptionsInputObject_2 {
  offsetY: sitePluginConnectionPluginOptionsPluginsPluginOptionsOffsetYQueryString_2
  backgroundColor: sitePluginConnectionPluginOptionsPluginsPluginOptionsBackgroundColorQueryString_2
  quality: sitePluginConnectionPluginOptionsPluginsPluginOptionsQualityQueryInteger_2
  maxWidth: sitePluginConnectionPluginOptionsPluginsPluginOptionsMaxWidthQueryInteger_2
  sizeByPixelDensity: sitePluginConnectionPluginOptionsPluginsPluginOptionsSizeByPixelDensityQueryBoolean_2
}

input sitePluginConnectionPluginOptionsPluginsPluginOptionsMaxWidthQueryInteger_2 {
  eq: Int
  ne: Int
}

input sitePluginConnectionPluginOptionsPluginsPluginOptionsOffsetYQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePluginConnectionPluginOptionsPluginsPluginOptionsQualityQueryInteger_2 {
  eq: Int
  ne: Int
}

input sitePluginConnectionPluginOptionsPluginsPluginOptionsSizeByPixelDensityQueryBoolean_2 {
  eq: Boolean
  ne: Boolean
}

input sitePluginConnectionPluginOptionsPluginsQueryList_2 {
  in: [sitePluginConnectionPluginOptionsPluginsInputObject_2]
}

input sitePluginConnectionPluginOptionsPluginsResolveQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePluginConnectionPluginOptionsPluginsSsrApIsQueryList_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
}

input sitePluginConnectionPluginOptionsPluginsVersionQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePluginConnectionPluginOptionsPolicyDisallowQueryList_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
}

input sitePluginConnectionPluginOptionsPolicyInputObject_2 {
  userAgent: sitePluginConnectionPluginOptionsPolicyUserAgentQueryString_2
  disallow: sitePluginConnectionPluginOptionsPolicyDisallowQueryList_2
}

input sitePluginConnectionPluginOptionsPolicyQueryList_2 {
  in: [sitePluginConnectionPluginOptionsPolicyInputObject_2]
}

input sitePluginConnectionPluginOptionsPolicyUserAgentQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePluginConnectionPluginOptionsQualityQueryInteger_2 {
  eq: Int
  ne: Int
}

input sitePluginConnectionPluginOptionsRespectDntQueryBoolean_2 {
  eq: Boolean
  ne: Boolean
}

input sitePluginConnectionPluginOptionsShortNameQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePluginConnectionPluginOptionsShowSpinnerQueryBoolean_2 {
  eq: Boolean
  ne: Boolean
}

input sitePluginConnectionPluginOptionsSiteUrlQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePluginConnectionPluginOptionsSizeByPixelDensityQueryBoolean_2 {
  eq: Boolean
  ne: Boolean
}

input sitePluginConnectionPluginOptionsStartUrlQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePluginConnectionPluginOptionsThemeColorQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePluginConnectionPluginOptionsTrackingIdQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePluginConnectionResolveQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePluginConnectionSort {
  fields: [SitePluginConnectionSortByFieldsEnum]!
  order: sitePluginConnectionSortOrderValues = ASC
}

enum SitePluginConnectionSortByFieldsEnum {
  resolve
  id
  name
  version
  pluginOptions___plugins
  pluginOptions___path
  pluginOptions___name
  pluginOptions___offsetY
  pluginOptions___backgroundColor
  pluginOptions___quality
  pluginOptions___maxWidth
  pluginOptions___sizeByPixelDensity
  pluginOptions___anonymize
  pluginOptions___head
  pluginOptions___respectDNT
  pluginOptions___trackingId
  pluginOptions___dsn
  pluginOptions___config___version
  pluginOptions___color
  pluginOptions___showSpinner
  pluginOptions___siteUrl
  pluginOptions___background_color
  pluginOptions___description
  pluginOptions___display
  pluginOptions___icon
  pluginOptions___short_name
  pluginOptions___start_url
  pluginOptions___theme_color
  pluginOptions___policy
  nodeAPIs
  browserAPIs
  ssrAPIs
  pluginFilepath
  packageJson___name
  packageJson___description
  packageJson___version
  packageJson___main
  packageJson___author
  packageJson___license
  packageJson___dependencies
  packageJson___devDependencies
  packageJson___peerDependencies
  packageJson___keywords
  parent
  internal___contentDigest
  internal___type
  internal___owner
}

enum sitePluginConnectionSortOrderValues {
  ASC
  DESC
}

input sitePluginConnectionSsrApIsQueryList_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
}

input sitePluginConnectionVersionQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

enum sitePluginDistinctEnum {
  resolve
  id
  name
  version
  pluginOptions___plugins
  pluginOptions___path
  pluginOptions___name
  pluginOptions___offsetY
  pluginOptions___backgroundColor
  pluginOptions___quality
  pluginOptions___maxWidth
  pluginOptions___sizeByPixelDensity
  pluginOptions___anonymize
  pluginOptions___head
  pluginOptions___respectDNT
  pluginOptions___trackingId
  pluginOptions___dsn
  pluginOptions___config___version
  pluginOptions___color
  pluginOptions___showSpinner
  pluginOptions___siteUrl
  pluginOptions___background_color
  pluginOptions___description
  pluginOptions___display
  pluginOptions___icon
  pluginOptions___short_name
  pluginOptions___start_url
  pluginOptions___theme_color
  pluginOptions___policy
  nodeAPIs
  browserAPIs
  ssrAPIs
  pluginFilepath
  packageJson___name
  packageJson___description
  packageJson___version
  packageJson___main
  packageJson___author
  packageJson___license
  packageJson___dependencies
  packageJson___devDependencies
  packageJson___peerDependencies
  packageJson___keywords
  parent
  internal___contentDigest
  internal___type
  internal___owner
}

"""An edge in a connection."""
type SitePluginEdge {
  """The item at the end of the edge"""
  node: SitePlugin

  """The next edge in the connection"""
  next: SitePlugin

  """The previous edge in the connection"""
  previous: SitePlugin
}

"""A connection to a list of items."""
type sitePluginGroupConnectionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [sitePluginGroupConnectionEdge]
  field: String
  fieldValue: String
  totalCount: Int
}

"""An edge in a connection."""
type sitePluginGroupConnectionEdge {
  """The item at the end of the edge"""
  node: SitePlugin

  """The next edge in the connection"""
  next: SitePlugin

  """The previous edge in the connection"""
  previous: SitePlugin
}

enum sitePluginGroupEnum {
  resolve
  id
  name
  version
  pluginOptions___plugins
  pluginOptions___path
  pluginOptions___name
  pluginOptions___offsetY
  pluginOptions___backgroundColor
  pluginOptions___quality
  pluginOptions___maxWidth
  pluginOptions___sizeByPixelDensity
  pluginOptions___anonymize
  pluginOptions___head
  pluginOptions___respectDNT
  pluginOptions___trackingId
  pluginOptions___dsn
  pluginOptions___config___version
  pluginOptions___color
  pluginOptions___showSpinner
  pluginOptions___siteUrl
  pluginOptions___background_color
  pluginOptions___description
  pluginOptions___display
  pluginOptions___icon
  pluginOptions___short_name
  pluginOptions___start_url
  pluginOptions___theme_color
  pluginOptions___policy
  nodeAPIs
  browserAPIs
  ssrAPIs
  pluginFilepath
  packageJson___name
  packageJson___description
  packageJson___version
  packageJson___main
  packageJson___author
  packageJson___license
  packageJson___dependencies
  packageJson___devDependencies
  packageJson___peerDependencies
  packageJson___keywords
  parent
  internal___contentDigest
  internal___type
  internal___owner
}

input sitePluginIdQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePluginInternalContentDigestQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePluginInternalInputObject_2 {
  contentDigest: sitePluginInternalContentDigestQueryString_2
  type: sitePluginInternalTypeQueryString_2
  owner: sitePluginInternalOwnerQueryString_2
}

input sitePluginInternalOwnerQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePluginInternalTypeQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePluginNameQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePluginNodeApIsQueryList_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
}

input sitePluginPackageJsonAuthorQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePluginPackageJsonDependenciesInputObject_2 {
  name: sitePluginPackageJsonDependenciesNameQueryString_2
  version: sitePluginPackageJsonDependenciesVersionQueryString_2
}

input sitePluginPackageJsonDependenciesNameQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePluginPackageJsonDependenciesQueryList_2 {
  in: [sitePluginPackageJsonDependenciesInputObject_2]
}

input sitePluginPackageJsonDependenciesVersionQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePluginPackageJsonDescriptionQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePluginPackageJsonDevDependenciesInputObject_2 {
  name: sitePluginPackageJsonDevDependenciesNameQueryString_2
  version: sitePluginPackageJsonDevDependenciesVersionQueryString_2
}

input sitePluginPackageJsonDevDependenciesNameQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePluginPackageJsonDevDependenciesQueryList_2 {
  in: [sitePluginPackageJsonDevDependenciesInputObject_2]
}

input sitePluginPackageJsonDevDependenciesVersionQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePluginPackageJsonInputObject_2 {
  name: sitePluginPackageJsonNameQueryString_2
  description: sitePluginPackageJsonDescriptionQueryString_2
  version: sitePluginPackageJsonVersionQueryString_2
  main: sitePluginPackageJsonMainQueryString_2
  author: sitePluginPackageJsonAuthorQueryString_2
  license: sitePluginPackageJsonLicenseQueryString_2
  dependencies: sitePluginPackageJsonDependenciesQueryList_2
  devDependencies: sitePluginPackageJsonDevDependenciesQueryList_2
  peerDependencies: sitePluginPackageJsonPeerDependenciesQueryList_2
  keywords: sitePluginPackageJsonKeywordsQueryList_2
}

input sitePluginPackageJsonKeywordsQueryList_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
}

input sitePluginPackageJsonLicenseQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePluginPackageJsonMainQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePluginPackageJsonNameQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePluginPackageJsonPeerDependenciesInputObject_2 {
  name: sitePluginPackageJsonPeerDependenciesNameQueryString_2
  version: sitePluginPackageJsonPeerDependenciesVersionQueryString_2
}

input sitePluginPackageJsonPeerDependenciesNameQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePluginPackageJsonPeerDependenciesQueryList_2 {
  in: [sitePluginPackageJsonPeerDependenciesInputObject_2]
}

input sitePluginPackageJsonPeerDependenciesVersionQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePluginPackageJsonVersionQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePluginPluginFilepathQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePluginPluginOptionsAnonymizeQueryBoolean_2 {
  eq: Boolean
  ne: Boolean
}

input sitePluginPluginOptionsBackgroundColorQueryString_3 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePluginPluginOptionsBackgroundColorQueryString_4 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePluginPluginOptionsColorQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePluginPluginOptionsConfigInputObject_2 {
  version: sitePluginPluginOptionsConfigVersionQueryString_2
}

input sitePluginPluginOptionsConfigVersionQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePluginPluginOptionsDescriptionQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePluginPluginOptionsDisplayQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePluginPluginOptionsDsnQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePluginPluginOptionsHeadQueryBoolean_2 {
  eq: Boolean
  ne: Boolean
}

input sitePluginPluginOptionsIconQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePluginPluginOptionsInputObject_2 {
  plugins: sitePluginPluginOptionsPluginsQueryList_2
  path: sitePluginPluginOptionsPathQueryString_2
  name: sitePluginPluginOptionsNameQueryString_2
  offsetY: sitePluginPluginOptionsOffsetYQueryString_2
  backgroundColor: sitePluginPluginOptionsBackgroundColorQueryString_3
  quality: sitePluginPluginOptionsQualityQueryInteger_2
  maxWidth: sitePluginPluginOptionsMaxWidthQueryInteger_2
  sizeByPixelDensity: sitePluginPluginOptionsSizeByPixelDensityQueryBoolean_2
  anonymize: sitePluginPluginOptionsAnonymizeQueryBoolean_2
  head: sitePluginPluginOptionsHeadQueryBoolean_2
  respectDNT: sitePluginPluginOptionsRespectDntQueryBoolean_2
  trackingId: sitePluginPluginOptionsTrackingIdQueryString_2
  dsn: sitePluginPluginOptionsDsnQueryString_2
  config: sitePluginPluginOptionsConfigInputObject_2
  color: sitePluginPluginOptionsColorQueryString_2
  showSpinner: sitePluginPluginOptionsShowSpinnerQueryBoolean_2
  siteUrl: sitePluginPluginOptionsSiteUrlQueryString_2
  background_color: sitePluginPluginOptionsBackgroundColorQueryString_4
  description: sitePluginPluginOptionsDescriptionQueryString_2
  display: sitePluginPluginOptionsDisplayQueryString_2
  icon: sitePluginPluginOptionsIconQueryString_2
  short_name: sitePluginPluginOptionsShortNameQueryString_2
  start_url: sitePluginPluginOptionsStartUrlQueryString_2
  theme_color: sitePluginPluginOptionsThemeColorQueryString_2
  policy: sitePluginPluginOptionsPolicyQueryList_2
}

input sitePluginPluginOptionsMaxWidthQueryInteger_2 {
  eq: Int
  ne: Int
}

input sitePluginPluginOptionsNameQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePluginPluginOptionsOffsetYQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePluginPluginOptionsPathQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePluginPluginOptionsPluginsBrowserApIsQueryList_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
}

input sitePluginPluginOptionsPluginsIdQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePluginPluginOptionsPluginsInputObject_2 {
  resolve: sitePluginPluginOptionsPluginsResolveQueryString_2
  id: sitePluginPluginOptionsPluginsIdQueryString_2
  name: sitePluginPluginOptionsPluginsNameQueryString_2
  version: sitePluginPluginOptionsPluginsVersionQueryString_2
  pluginOptions: sitePluginPluginOptionsPluginsPluginOptionsInputObject_2
  browserAPIs: sitePluginPluginOptionsPluginsBrowserApIsQueryList_2
  ssrAPIs: sitePluginPluginOptionsPluginsSsrApIsQueryList_2
  pluginFilepath: sitePluginPluginOptionsPluginsPluginFilepathQueryString_2
}

input sitePluginPluginOptionsPluginsNameQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePluginPluginOptionsPluginsPluginFilepathQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePluginPluginOptionsPluginsPluginOptionsBackgroundColorQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePluginPluginOptionsPluginsPluginOptionsInputObject_2 {
  offsetY: sitePluginPluginOptionsPluginsPluginOptionsOffsetYQueryString_2
  backgroundColor: sitePluginPluginOptionsPluginsPluginOptionsBackgroundColorQueryString_2
  quality: sitePluginPluginOptionsPluginsPluginOptionsQualityQueryInteger_2
  maxWidth: sitePluginPluginOptionsPluginsPluginOptionsMaxWidthQueryInteger_2
  sizeByPixelDensity: sitePluginPluginOptionsPluginsPluginOptionsSizeByPixelDensityQueryBoolean_2
}

input sitePluginPluginOptionsPluginsPluginOptionsMaxWidthQueryInteger_2 {
  eq: Int
  ne: Int
}

input sitePluginPluginOptionsPluginsPluginOptionsOffsetYQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePluginPluginOptionsPluginsPluginOptionsQualityQueryInteger_2 {
  eq: Int
  ne: Int
}

input sitePluginPluginOptionsPluginsPluginOptionsSizeByPixelDensityQueryBoolean_2 {
  eq: Boolean
  ne: Boolean
}

input sitePluginPluginOptionsPluginsQueryList_2 {
  in: [sitePluginPluginOptionsPluginsInputObject_2]
}

input sitePluginPluginOptionsPluginsResolveQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePluginPluginOptionsPluginsSsrApIsQueryList_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
}

input sitePluginPluginOptionsPluginsVersionQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePluginPluginOptionsPolicyDisallowQueryList_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
}

input sitePluginPluginOptionsPolicyInputObject_2 {
  userAgent: sitePluginPluginOptionsPolicyUserAgentQueryString_2
  disallow: sitePluginPluginOptionsPolicyDisallowQueryList_2
}

input sitePluginPluginOptionsPolicyQueryList_2 {
  in: [sitePluginPluginOptionsPolicyInputObject_2]
}

input sitePluginPluginOptionsPolicyUserAgentQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePluginPluginOptionsQualityQueryInteger_2 {
  eq: Int
  ne: Int
}

input sitePluginPluginOptionsRespectDntQueryBoolean_2 {
  eq: Boolean
  ne: Boolean
}

input sitePluginPluginOptionsShortNameQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePluginPluginOptionsShowSpinnerQueryBoolean_2 {
  eq: Boolean
  ne: Boolean
}

input sitePluginPluginOptionsSiteUrlQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePluginPluginOptionsSizeByPixelDensityQueryBoolean_2 {
  eq: Boolean
  ne: Boolean
}

input sitePluginPluginOptionsStartUrlQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePluginPluginOptionsThemeColorQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePluginPluginOptionsTrackingIdQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePluginResolveQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePluginSsrApIsQueryList_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
}

input sitePluginVersionQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input sitePolyfillQueryBoolean_2 {
  eq: Boolean
  ne: Boolean
}

input sitePortQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input siteSiteMetadataInputObject_2 {
  siteName: siteSiteMetadataSiteNameQueryString_2
  siteUrl: siteSiteMetadataSiteUrlQueryString_2
}

input siteSiteMetadataSiteNameQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input siteSiteMetadataSiteUrlQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

type steps_2 {
  color: String
  description: String
  icon: String
  iconOriginal: String
  id: String
  title: String
}

"""Node of type SvgsJson"""
type SvgsJson implements Node {
  """The id of this node."""
  id: ID!

  """The parent of this node."""
  parent: Node

  """The children of this node."""
  children: [Node]
  moduleNameTemplate: String
  internal: internal_14
}

"""A connection to a list of items."""
type SvgsJsonConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SvgsJsonEdge]
  totalCount: Int
  distinct(field: svgsJsonDistinctEnum): [String]
  group(skip: Int, limit: Int, field: svgsJsonGroupEnum): [svgsJsonGroupConnectionConnection]
}

input svgsJsonConnectionIdQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input svgsJsonConnectionInternalContentDigestQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input svgsJsonConnectionInternalInputObject_2 {
  contentDigest: svgsJsonConnectionInternalContentDigestQueryString_2
  type: svgsJsonConnectionInternalTypeQueryString_2
  owner: svgsJsonConnectionInternalOwnerQueryString_2
}

input svgsJsonConnectionInternalOwnerQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input svgsJsonConnectionInternalTypeQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input svgsJsonConnectionModuleNameTemplateQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input svgsJsonConnectionSort {
  fields: [SvgsJsonConnectionSortByFieldsEnum]!
  order: svgsJsonConnectionSortOrderValues = ASC
}

enum SvgsJsonConnectionSortByFieldsEnum {
  moduleNameTemplate
  id
  parent
  internal___contentDigest
  internal___type
  internal___owner
}

enum svgsJsonConnectionSortOrderValues {
  ASC
  DESC
}

enum svgsJsonDistinctEnum {
  moduleNameTemplate
  id
  parent
  internal___contentDigest
  internal___type
  internal___owner
}

"""An edge in a connection."""
type SvgsJsonEdge {
  """The item at the end of the edge"""
  node: SvgsJson

  """The next edge in the connection"""
  next: SvgsJson

  """The previous edge in the connection"""
  previous: SvgsJson
}

"""A connection to a list of items."""
type svgsJsonGroupConnectionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [svgsJsonGroupConnectionEdge]
  field: String
  fieldValue: String
  totalCount: Int
}

"""An edge in a connection."""
type svgsJsonGroupConnectionEdge {
  """The item at the end of the edge"""
  node: SvgsJson

  """The next edge in the connection"""
  next: SvgsJson

  """The previous edge in the connection"""
  previous: SvgsJson
}

enum svgsJsonGroupEnum {
  moduleNameTemplate
  id
  parent
  internal___contentDigest
  internal___type
  internal___owner
}

input svgsJsonIdQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input svgsJsonInternalContentDigestQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input svgsJsonInternalInputObject_2 {
  contentDigest: svgsJsonInternalContentDigestQueryString_2
  type: svgsJsonInternalTypeQueryString_2
  owner: svgsJsonInternalOwnerQueryString_2
}

input svgsJsonInternalOwnerQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input svgsJsonInternalTypeQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input svgsJsonModuleNameTemplateQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input tableOfContentsQueryString_3 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input tableOfContentsQueryString_4 {
  eq: String
  ne: String
  regex: String
  glob: String
}

input timeToReadQueryInt_3 {
  eq: Int
  ne: Int
}

input timeToReadQueryInt_4 {
  eq: Int
  ne: Int
}

type wordCount {
  paragraphs: Int
  sentences: Int
  words: Int
}

input wordCountParagraphsQueryInt_3 {
  eq: Int
  ne: Int
}

input wordCountParagraphsQueryInt_4 {
  eq: Int
  ne: Int
}

input wordCountSentencesQueryInt_3 {
  eq: Int
  ne: Int
}

input wordCountSentencesQueryInt_4 {
  eq: Int
  ne: Int
}

input wordCountTypeName_3 {
  paragraphs: wordCountParagraphsQueryInt_3
  sentences: wordCountSentencesQueryInt_3
  words: wordCountWordsQueryInt_3
}

input wordCountTypeName_4 {
  paragraphs: wordCountParagraphsQueryInt_4
  sentences: wordCountSentencesQueryInt_4
  words: wordCountWordsQueryInt_4
}

input wordCountWordsQueryInt_3 {
  eq: Int
  ne: Int
}

input wordCountWordsQueryInt_4 {
  eq: Int
  ne: Int
}
